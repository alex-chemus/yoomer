{"version":3,"file":"static/js/728.ddacc6fd.chunk.js","mappings":"mLAsBA,EApBsB,SAACA,GACrB,MAAO,CACLC,SAAUD,EAAKC,SACfC,cAAeF,EAAKE,cACpBC,kBAAmBH,EAAKG,kBACxBC,YAAaJ,EAAKI,YAClBC,MAAOL,EAAKK,MACZC,mBAAoBN,EAAKM,mBACzBC,iBAAkBP,EAAKO,iBACvBC,oBAAqBR,EAAKQ,oBAC1BC,4BAA6BT,EAAKS,4BAClCC,sBAAuBV,EAAKU,sBAC5BC,wBAAyBX,EAAKW,wBAC9BC,wBAAyBZ,EAAKY,wBAC9BC,QAASb,EAAKa,QACdC,OAAQd,EAAKc,OACbC,mBAAoBf,EAAKe,qBCjB7B,EAAyB,0BAAzB,EAA4D,0BAA5D,EAA+F,0BAA/F,EAAsI,8BAAtI,EAA+K,4BAA/K,EAAyN,+BAAzN,EAAsQ,+BAAtQ,EAA+S,2BAA/S,EAAwV,+BAAxV,EAAiY,2BAAjY,EAA2a,gCAA3a,EAAmd,yBAAnd,EAA2f,gC,UCA3f,EAA8B,mC,uCC4D9B,EA/CoD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAC1DC,GAAQC,EAAAA,EAAAA,KAEd,GAA0BC,EAAAA,EAAAA,UAAkB,IAA5C,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,QAAe,IAkB1BC,GAAaC,EAAAA,EAAAA,GAAS,CAC1BC,KAAK,MAAD,OAAQX,EAAR,YAAqBC,GACzBW,SAlBiB,SAACC,EAAUC,GAC5B,IAAM9B,EAAO6B,EAAI7B,KAEbA,EAAK+B,QAAUR,EAASS,UAC1BT,EAASS,QAAUhC,EAAK+B,MAExBT,GAAS,SAAAW,GACP,IAAMC,EAAWlC,EAAKmC,SAASC,KAAI,SAACC,GAAD,OAAeC,EAAAA,EAAAA,IAASD,EAAKrC,SAChE,OAAO8B,GAAW,OACTI,GADS,kBAETD,IAFS,OAEKC,SAS3BX,SAAAA,IAKF,OAFAgB,EAAAA,EAAAA,YAAU,kBAAMd,GAAW,KAAO,CAACP,EAAOD,IAEnCI,EAAMmB,QAET,+BACGnB,GAASA,EAAMe,KAAI,SAACK,EAAMC,GACzB,OAAO,gBAAKC,UAAWC,EAAhB,UACL,SAAC,KAAD,CAAc5C,KAAMyC,GAATC,QAGdrB,GAASH,IAAS,SAAC,KAAD,CACjB2B,UAAW,kBAAMpB,GAAW,IAC5BqB,WAAW,0BAIf,SAAC,KAAD,KCzDN,EAAyB,6BCwBzB,EAfkD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAU/B,EAAgB,EAAhBA,UAC7D,GAA4BI,EAAAA,EAAAA,UAAS2B,GAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAASxB,EAAAA,EAAAA,GAAS,CACtBC,KAAM,iBACNC,SAAU,kBAAMqB,GAAU,SAAAE,GAAI,OAAKA,MACnCC,KAAM,IAAIC,gBAAJ,iBAA8BL,EAAS,QAAU,MAAjD,oBAAkEhC,MAG1E,OAAO,mBAAQsC,QAASJ,EAAQP,UAAWC,EAApC,SACLI,EACI,cACA,eCpBR,EAAwB,qBAAxB,EAAwD,wBAAxD,EAA4F,yBAA5F,EAA6H,qBC0D7H,EA5CoC,SAAC,GAAmB,IAAjBhC,EAAgB,EAAhBA,UACrC,GAA0BI,EAAAA,EAAAA,YAA1B,eAAOmC,EAAP,KAAcC,EAAd,MAUAjB,EAAAA,EAAAA,YAAUb,EAAAA,EAAAA,GAAS,CACjBC,KAAK,MAAD,OAAQX,EAAR,gBACJY,SAViB,SAAC5B,GAElBwD,EAASxD,EAAKuD,MAAMnB,KAAI,SAACqB,GAAD,MAAgB,CACtCC,WAAYD,EAAKC,WACjBnD,iBAAkBkD,EAAKlD,yBAOvB,IAWJ,OAAOgD,GAEH,eAAIZ,UAAWC,EAAf,SACEW,EAAMnB,KAAI,SAACqB,EAAaf,GACtB,OACE,gBAAIC,UAAWC,EAAf,WACE,eAAID,UAAWC,EAAmBU,QAAS,SAAAK,GAAC,OAfrC,SAACA,GAClB,IAAMC,EAAQD,EAAEE,cAAcC,mBAC1BF,EAAMG,MAAMC,UACdJ,EAAMG,MAAMC,UAAY,GAExBJ,EAAMG,MAAMC,UAAYJ,EAAMK,aAAe,KAUWC,CAAWP,IAA3D,SAAgEF,EAAKC,cACrE,gBACES,wBAAyB,CAACC,OAAQX,EAAKlD,kBACvCoC,UAAWC,MAJuBF,SAW5C,SAAC,KAAD,KCvDN,ECa4B,WAC1B,IAAMxB,GAAQC,EAAAA,EAAAA,KACNH,GAAcqD,EAAAA,EAAAA,MAAdrD,UAER,GAA8BI,EAAAA,EAAAA,YAA9B,eAAOkD,EAAP,KAAgBC,EAAhB,KACA,GAAwBnD,EAAAA,EAAAA,UAAgB,QAAxC,eAAOH,EAAP,KAAauD,EAAb,KAWMC,GAAiB/C,EAAAA,EAAAA,GAAS,CAC9BC,KAAK,MAAD,OAAQX,EAAR,UACJY,SAXiB,SAAC5B,GAClBuE,EAAWG,EAAc1E,EAAKA,WAahCuC,EAAAA,EAAAA,WAAUkC,EAAgB,CAACvD,IAE3B,IAAMyD,EAAW,mBACd,OAACL,QAAD,IAACA,IAAAA,EAAS7D,gCACP,OAAC6D,QAAD,IAACA,IAAAA,EAAS5D,wBAC6B,KAAjC,OAAP4D,QAAO,IAAPA,OAAA,EAAAA,EAAS9D,oBAAoBgC,SAGlC,OAAO8B,GAEH,6BACE,SAAC,KAAD,KACA,oBAAQ3B,UAAWC,EAAnB,UACG0B,EAAQ3D,0BACP,gBAAKiE,IAAKN,EAAQ3D,wBAAyBkE,IAAI,SAASlC,UAAWC,KAErE,iBACE,oBACAD,UAAWC,EACX,cAAa0B,EAAQ3D,wBAA0B,OAAS,QAH1D,WAKE,iBAAKgC,UAAWC,EAAhB,UACI0B,EAAQpE,eAAiBoE,EAAQrE,UAC/B,gBAAK2E,IAAKN,EAAQpE,eAAiBoE,EAAQrE,SAAU4E,IAAI,MACzD,gBAAK,yBACT,4BACE,eAAIxE,MAAOiE,EAAQjE,MAAnB,SAA2BiE,EAAQjE,SACnC,8BAAMW,YAGV,SAAC,EAAD,CAAc+B,SAAUuB,EAAQvD,mBAAoBC,UAAWA,WAInE,qBAAS2B,UAAWC,EAAqB,oBAAzC,WACE,qBAASD,UAAWC,EAApB,WACE,gBAAKD,UAAWC,EAAhB,UACE,SAAC,KAAD,CAASkC,WAAY,SAACC,GAAD,OAAgBP,EAAQO,IAAM9D,KAAMA,OAE3D,SAAC,EAAD,CAAeD,UAAWA,EAAYC,KAAMA,QAG9C,mBAAO0B,UAAWC,EAAlB,WACE,qBAASD,UAAWC,EAApB,WACE,mCACA,cAAGD,UAAWC,EAAd,SAAoC0B,EAAQhE,sBAC5C,0CAAgB,uBAAIgE,EAAQlE,kBAC5B,2CAAiB,uBAAIkE,EAAQnE,wBAC7B,sCAAY,uBA1DR,WACd,IAAM6E,EAAO,IAAIC,KAAwB,IAAnBX,EAASzD,SAC/B,MAAM,GAAN,OAAUmE,EAAKE,UAAf,YAA4BF,EAAKG,WAAW,EAA5C,YAAiDH,EAAKI,eAwD5BF,WAGjBP,MACG,eAAI,sBAGPA,MACC,iBAAKhC,UAAWC,EAAhB,WACE,0CACA,SAAC,KAAD,CACEyC,QAASf,EAAQ7D,4BACjB6E,SAAUhB,EAAQ9D,oBAClB+E,MAAOjB,EAAQ5D,4BAKrB,eAAI,uBAEJ,iBAAKiC,UAAWC,EAAhB,WACE,mCACA,SAAC,EAAD,CAAO5B,UAAWA,iBAM1B,4BACA,SAAC,KAAD,KACA,gBAAK2B,UAAWC,EAAhB,UACE,SAAC,KAAD","sources":["features/subreddit/trimSubreddit.ts","webpack://yoomer/./src/features/subreddit/Subreddit/Subreddit.module.scss?e603","webpack://yoomer/./src/features/subreddit/SubredditFeed/SubredditFeed.module.scss?2095","features/subreddit/SubredditFeed/SubredditFeed.tsx","webpack://yoomer/./src/features/subreddit/Subscription/Subscription.module.scss?ab9c","features/subreddit/Subscription/Subscription.tsx","webpack://yoomer/./src/features/subreddit/Rules/Rules.module.scss?b3c1","features/subreddit/Rules/Rules.tsx","views/Subreddit.tsx","features/subreddit/Subreddit/Subreddit.tsx"],"sourcesContent":["import { ISubreddit } from \"./types\";\r\n\r\nconst trimSubreddit = (data: any): ISubreddit => {\r\n  return {\r\n    icon_img: data.icon_img,\r\n    community_img: data.community_img,\r\n    active_user_count: data.active_user_count,\r\n    subscribers: data.subscribers,\r\n    title: data.title,\r\n    public_description: data.public_description,\r\n    description_html: data.description_html,\r\n    user_flair_richtext: data.user_flair_richtext,\r\n    user_flair_background_color: data.user_flair_background_color,\r\n    user_flair_text_color: data.user_flair_text_color,\r\n    banner_background_image: data.banner_background_image,\r\n    banner_background_color: data.banner_background_color,\r\n    created: data.created,\r\n    over18: data.over18,\r\n    user_is_subscriber: data.user_is_subscriber\r\n  }\r\n}\r\n\r\nexport default trimSubreddit","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Subreddit_loader__snghz\",\"banner\":\"Subreddit_banner__MNtC3\",\"header\":\"Subreddit_header__UUoil\",\"headerInfo\":\"Subreddit_headerInfo__O-lpS\",\"subCreds\":\"Subreddit_subCreds__-Zv8d\",\"contentGrid\":\"Subreddit_contentGrid__iqgBW\",\"mainContent\":\"Subreddit_mainContent__g8NZ7\",\"sidebar\":\"Subreddit_sidebar__Kl7g5\",\"description\":\"Subreddit_description__i9aUv\",\"sortbar\":\"Subreddit_sortbar__gmzIN\",\"aboutSection\":\"Subreddit_aboutSection__kZNW5\",\"flair\":\"Subreddit_flair__NwnAl\",\"rulesWrapper\":\"Subreddit_rulesWrapper__IDlSN\",\"fade-in\":\"Subreddit_fade-in__o6SsG\",\"fade-out\":\"Subreddit_fade-out__GUwOW\",\"scale-up\":\"Subreddit_scale-up__qx4z3\",\"scale-down\":\"Subreddit_scale-down__DlEv3\",\"slide-out-up\":\"Subreddit_slide-out-up__Pwdsa\",\"slide-out-down\":\"Subreddit_slide-out-down__C4omN\",\"slide-out-right\":\"Subreddit_slide-out-right__KOpl4\",\"slide-out-left\":\"Subreddit_slide-out-left__3LCpH\",\"slide-in-up\":\"Subreddit_slide-in-up__wZei7\",\"slide-in-down\":\"Subreddit_slide-in-down__viHkj\",\"slide-in-right\":\"Subreddit_slide-in-right__s31uv\",\"slide-in-left\":\"Subreddit_slide-in-left__U3Rc3\",\"shake-x\":\"Subreddit_shake-x__SS9O7\",\"shake-y\":\"Subreddit_shake-y__chmgK\",\"spin\":\"Subreddit_spin__vqw4C\",\"ping\":\"Subreddit_ping__8HFLy\",\"blink\":\"Subreddit_blink__WwfZO\",\"float\":\"Subreddit_float__Ml-bg\",\"bounce\":\"Subreddit_bounce__QH4fE\",\"pulse\":\"Subreddit_pulse__xYA0Z\"};","// extracted by mini-css-extract-plugin\nexport default {\"postWrapper\":\"SubredditFeed_postWrapper__ItOAu\",\"fade-in\":\"SubredditFeed_fade-in__WzShQ\",\"fade-out\":\"SubredditFeed_fade-out__COIOj\",\"scale-up\":\"SubredditFeed_scale-up__ipDYy\",\"scale-down\":\"SubredditFeed_scale-down__SSFp6\",\"slide-out-up\":\"SubredditFeed_slide-out-up__Ognuf\",\"slide-out-down\":\"SubredditFeed_slide-out-down__PlixN\",\"slide-out-right\":\"SubredditFeed_slide-out-right__QoybU\",\"slide-out-left\":\"SubredditFeed_slide-out-left__7Hg1g\",\"slide-in-up\":\"SubredditFeed_slide-in-up__n3fuR\",\"slide-in-down\":\"SubredditFeed_slide-in-down__hzvzw\",\"slide-in-right\":\"SubredditFeed_slide-in-right__-47hk\",\"slide-in-left\":\"SubredditFeed_slide-in-left__OV3UX\",\"shake-x\":\"SubredditFeed_shake-x__3-cJi\",\"shake-y\":\"SubredditFeed_shake-y__UB0q5\",\"spin\":\"SubredditFeed_spin__kjSLl\",\"ping\":\"SubredditFeed_ping__rMXed\",\"blink\":\"SubredditFeed_blink__FpDMX\",\"float\":\"SubredditFeed_float__nICHL\",\"bounce\":\"SubredditFeed_bounce__kros-\",\"pulse\":\"SubredditFeed_pulse__8LBYy\"};","import React, { useEffect, useState, useRef } from 'react'\r\nimport classes from './SubredditFeed.module.scss'\r\n\r\nimport { Observer, Loader } from '@shared/components'\r\nimport { useAccessToken, useFetch } from '@shared/hooks'\r\nimport { ISort } from '@shared/types'\r\n\r\nimport { IPost, Post, trimPost } from '@features/post'\r\n\r\ninterface SubredditFeedProps {\r\n  subreddit: string,\r\n  sort: ISort\r\n}\r\n\r\nconst SubredditFeed: React.FC<SubredditFeedProps> = ({ subreddit, sort }) => {\r\n  const token = useAccessToken()\r\n\r\n  const [posts, setPosts] = useState<IPost[]>([])\r\n  const afterRef = useRef<string>('')\r\n\r\n  const acceptData = (res: any, shouldReset: boolean) => {\r\n    const data = res.data\r\n\r\n    if (data.after !== afterRef.current) {\r\n      afterRef.current = data.after\r\n\r\n      setPosts(prevPosts => {\r\n        const newPosts = data.children.map((item: any) => trimPost(item.data)) \r\n        return shouldReset\r\n          ? [ ...newPosts ]\r\n          : [ ...prevPosts, ...newPosts ]\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  const fetchPosts = useFetch({\r\n    path: `/r/${subreddit}/${sort}`,\r\n    callback: acceptData,\r\n    afterRef\r\n  })\r\n\r\n  useEffect(() => fetchPosts(true), [token, sort])\r\n\r\n  return posts.length\r\n    ? (\r\n      <section>\r\n        {posts && posts.map((post, i) => {\r\n          return <div className={classes.postWrapper}>\r\n            <Post key={i} data={post} />\r\n          </div>\r\n        })}\r\n        {posts && token && <Observer \r\n          onObserve={() => fetchPosts(false)}\r\n          logMessage=\"in subreddit feed\"\r\n        />}\r\n      </section>\r\n    )\r\n    : <Loader />\r\n}\r\n\r\nexport default SubredditFeed","// extracted by mini-css-extract-plugin\nexport default {\"subBtn\":\"Subscription_subBtn__7pDvx\",\"fade-in\":\"Subscription_fade-in__1KG-z\",\"fade-out\":\"Subscription_fade-out__fQrhq\",\"scale-up\":\"Subscription_scale-up__dIy3c\",\"scale-down\":\"Subscription_scale-down__f1kLG\",\"slide-out-up\":\"Subscription_slide-out-up__LY8k7\",\"slide-out-down\":\"Subscription_slide-out-down__o8pHD\",\"slide-out-right\":\"Subscription_slide-out-right__CLNDN\",\"slide-out-left\":\"Subscription_slide-out-left__BTKuf\",\"slide-in-up\":\"Subscription_slide-in-up__nWKVP\",\"slide-in-down\":\"Subscription_slide-in-down__-5hyw\",\"slide-in-right\":\"Subscription_slide-in-right__xu8A9\",\"slide-in-left\":\"Subscription_slide-in-left__gCUu8\",\"shake-x\":\"Subscription_shake-x__-TN0x\",\"shake-y\":\"Subscription_shake-y__quFLM\",\"spin\":\"Subscription_spin__TZO89\",\"ping\":\"Subscription_ping__ki6KT\",\"blink\":\"Subscription_blink__ZF0S9\",\"float\":\"Subscription_float__yNevw\",\"bounce\":\"Subscription_bounce__Rn+oR\",\"pulse\":\"Subscription_pulse__vPIrx\"};","import React, { useState } from 'react'\r\nimport classes from './Subscription.module.scss'\r\n\r\nimport { useFetch } from '@shared/hooks'\r\n\r\ninterface SubscriptionProps {\r\n  isSubbed: boolean,\r\n  subreddit: string\r\n}\r\n\r\nconst Subscription: React.FC<SubscriptionProps> = ({ isSubbed, subreddit }) => {\r\n  const [subbed, setSubbed] = useState(isSubbed)\r\n  const action = useFetch({\r\n    path: '/api/subscribe',\r\n    callback: () => setSubbed(prev => !prev),\r\n    body: new URLSearchParams(`action=${subbed ? 'unsub' : 'sub'}&sr_name=${subreddit}`)\r\n  })\r\n\r\n  return <button onClick={action} className={classes.subBtn}>{\r\n    subbed\r\n      ? 'Unsubscribe'\r\n      : 'Subscribe'\r\n  }</button>\r\n}\r\n\r\nexport default Subscription","// extracted by mini-css-extract-plugin\nexport default {\"rules\":\"Rules_rules__b7TRP\",\"listItem\":\"Rules_listItem__eEu8d\",\"accordion\":\"Rules_accordion__syy0j\",\"panel\":\"Rules_panel__wF5YR\",\"fade-in\":\"Rules_fade-in__Joq6x\",\"fade-out\":\"Rules_fade-out__bVTHM\",\"scale-up\":\"Rules_scale-up__FcpO0\",\"scale-down\":\"Rules_scale-down__KeqY+\",\"slide-out-up\":\"Rules_slide-out-up__T+VlK\",\"slide-out-down\":\"Rules_slide-out-down__WzrZ3\",\"slide-out-right\":\"Rules_slide-out-right__hSChi\",\"slide-out-left\":\"Rules_slide-out-left__PD-1p\",\"slide-in-up\":\"Rules_slide-in-up__FM-wB\",\"slide-in-down\":\"Rules_slide-in-down__JB8x8\",\"slide-in-right\":\"Rules_slide-in-right__yMvak\",\"slide-in-left\":\"Rules_slide-in-left__r+012\",\"shake-x\":\"Rules_shake-x__3bk3c\",\"shake-y\":\"Rules_shake-y__qlwOe\",\"spin\":\"Rules_spin__KfFUZ\",\"ping\":\"Rules_ping__r8CAw\",\"blink\":\"Rules_blink__ZD3fU\",\"float\":\"Rules_float__DZ1Ve\",\"bounce\":\"Rules_bounce__-1t65\",\"pulse\":\"Rules_pulse__2xX2u\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport classes from './Rules.module.scss'\r\n\r\nimport { Loader } from '@shared/components'\r\nimport { useFetch } from '@shared/hooks'\r\n\r\ninterface RulesProps {\r\n  subreddit: string\r\n}\r\n\r\ninterface IRule {\r\n  short_name: string,\r\n  description_html: string\r\n}\r\n\r\nconst Rules: React.FC<RulesProps> = ({ subreddit }) => {\r\n  const [rules, setRules] = useState<IRule[] | null>()\r\n\r\n  const acceptData = (data: any) => {\r\n    //console.log(data.rules)\r\n    setRules(data.rules.map((rule: any) => ({\r\n      short_name: rule.short_name,\r\n      description_html: rule.description_html\r\n    })))\r\n  }\r\n\r\n  useEffect(useFetch({\r\n    path: `/r/${subreddit}/about/rules`,\r\n    callback: acceptData\r\n  }), [])\r\n\r\n  const toggleRule = (e: React.MouseEvent) => {\r\n    const panel = e.currentTarget.nextElementSibling as HTMLElement\r\n    if (panel.style.maxHeight) {\r\n      panel.style.maxHeight = ''\r\n    } else {\r\n      panel.style.maxHeight = panel.scrollHeight + \"px\"\r\n    }\r\n  }\r\n\r\n  return rules\r\n    ? (\r\n      <ul className={classes.rules}>{\r\n        rules.map((rule: IRule, i) => {\r\n          return (\r\n            <li className={classes.listItem} key={i}>\r\n              <h5 className={classes.accordion} onClick={e => toggleRule(e)}>{rule.short_name}</h5>\r\n              <div \r\n                dangerouslySetInnerHTML={{__html: rule.description_html}}\r\n                className={classes.panel}\r\n              />\r\n            </li>\r\n          )\r\n        })\r\n      }</ul>\r\n    )\r\n    : <Loader />\r\n}\r\n\r\nexport default Rules","import { Subreddit } from '@features/subreddit'\r\nexport default Subreddit","import React, { useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { ISubreddit } from \"../types\"\r\nimport trimSubreddit from \"../trimSubreddit\"\r\nimport classes from './Subreddit.module.scss'\r\n\r\nimport SubredditFeed from \"../SubredditFeed/SubredditFeed\"\r\nimport Subscription from \"../Subscription/Subscription\"\r\nimport Rules from \"../Rules/Rules\"\r\n\r\nimport { SortBar, Loader, Flair, Nav } from '@shared/components'\r\nimport { useAccessToken, useFetch } from '@shared/hooks'\r\nimport { ISort } from \"@shared/types\"\r\n\r\nconst Subreddit: React.FC = () => {\r\n  const token = useAccessToken()\r\n  const { subreddit } = useParams()\r\n\r\n  const [subData, setSubData] = useState<ISubreddit>()\r\n  const [sort, setSort] = useState<ISort>('best')\r\n\r\n  const acceptData = (data: any) => {\r\n    setSubData(trimSubreddit(data.data))\r\n  }\r\n\r\n  const getDate = () => {\r\n    const date = new Date(subData!.created * 1000)\r\n    return `${date.getDate()}.${date.getMonth()+1}.${date.getFullYear()}`\r\n  }\r\n\r\n  const fetchSubreddit = useFetch({\r\n    path: `/r/${subreddit}/about`,\r\n    callback: acceptData\r\n  })\r\n\r\n  useEffect(fetchSubreddit, [token])\r\n\r\n  const hasFlair = () => \r\n    !!subData?.user_flair_background_color \r\n    || !!subData?.user_flair_text_color \r\n    || subData?.user_flair_richtext.length !== 0\r\n  //console.log(subData, hasFlair())\r\n\r\n  return subData\r\n    ? (\r\n      <main>\r\n        <Nav />\r\n        <header className={classes.header}>\r\n          {subData.banner_background_image && (\r\n            <img src={subData.banner_background_image} alt=\"Banner\" className={classes.banner} />\r\n          )}\r\n          <div \r\n            data-container \r\n            className={classes.headerInfo} \r\n            data-offset={subData.banner_background_image ? 'true' : 'false'}\r\n          >\r\n            <div className={classes.subCreds}>\r\n              {(subData.community_img || subData.icon_img) \r\n                ? <img src={subData.community_img || subData.icon_img} alt=\"\" />\r\n                : <div data-placeholder />}\r\n              <div> \r\n                <h2 title={subData.title}>{subData.title}</h2>\r\n                <p>r/{subreddit}</p>\r\n              </div>\r\n            </div>\r\n            <Subscription isSubbed={subData.user_is_subscriber} subreddit={subreddit!} />\r\n          </div>\r\n        </header>\r\n\r\n        <section className={classes.contentGrid} data-container>\r\n          <section className={classes.mainContent}>\r\n            <div className={classes.sortbar}>\r\n              <SortBar changeSort={(val: ISort) => setSort(val)} sort={sort} />\r\n            </div>\r\n            <SubredditFeed subreddit={subreddit!} sort={sort} />\r\n          </section>\r\n\r\n          <aside className={classes.sidebar}>\r\n            <section className={classes.aboutSection}>\r\n              <h3>About</h3>\r\n              <p className={classes.description}>{subData.public_description}</p>\r\n              <p>Subscribers: <b>{subData.subscribers}</b></p>\r\n              <p>Active users: <b>{subData.active_user_count}</b></p>\r\n              <p>Created: <b>{getDate()}</b></p>\r\n            </section>\r\n\r\n            {hasFlair() && (\r\n                <hr data-separator />\r\n              )}\r\n\r\n            {hasFlair() && (\r\n              <div className={classes.flair}>\r\n                <p>My Flair:&nbsp;</p>\r\n                <Flair \r\n                  bgcolor={subData.user_flair_background_color}\r\n                  richtext={subData.user_flair_richtext}\r\n                  color={subData.user_flair_text_color}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <hr data-separator />\r\n\r\n            <div className={classes.rulesWrapper}>\r\n              <h3>Rules</h3>\r\n              <Rules subreddit={subreddit!} />\r\n            </div>\r\n          </aside>\r\n        </section>\r\n      </main>\r\n    )\r\n    : <div>\r\n      <Nav />\r\n      <div className={classes.loader}>\r\n        <Loader />\r\n      </div>\r\n    </div>\r\n}\r\n\r\nexport default Subreddit"],"names":["data","icon_img","community_img","active_user_count","subscribers","title","public_description","description_html","user_flair_richtext","user_flair_background_color","user_flair_text_color","banner_background_image","banner_background_color","created","over18","user_is_subscriber","subreddit","sort","token","useAccessToken","useState","posts","setPosts","afterRef","useRef","fetchPosts","useFetch","path","callback","res","shouldReset","after","current","prevPosts","newPosts","children","map","item","trimPost","useEffect","length","post","i","className","classes","onObserve","logMessage","isSubbed","subbed","setSubbed","action","prev","body","URLSearchParams","onClick","rules","setRules","rule","short_name","e","panel","currentTarget","nextElementSibling","style","maxHeight","scrollHeight","toggleRule","dangerouslySetInnerHTML","__html","useParams","subData","setSubData","setSort","fetchSubreddit","trimSubreddit","hasFlair","src","alt","changeSort","val","date","Date","getDate","getMonth","getFullYear","bgcolor","richtext","color"],"sourceRoot":""}