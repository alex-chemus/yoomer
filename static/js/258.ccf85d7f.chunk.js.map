{"version":3,"file":"static/js/258.ccf85d7f.chunk.js","mappings":"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","sources":["webpack://yoomer/./src/features/feed/FeedView/FeedView.module.scss?3761","webpack://yoomer/./src/features/feed/CommonFeed/CommonFeed.module.scss?383a","features/feed/CommonFeed/CommonFeed.tsx","webpack://yoomer/./src/features/feed/SubredditsSidebar/SubredditsSidebar.module.scss?874d","features/feed/trimSubredditCreds.ts","webpack://yoomer/./src/features/feed/ShowCommunities/ShowCommunities.module.scss?d646","features/feed/ShowCommunities/ShowCommunities.tsx","features/feed/Communities/Communities.tsx","webpack://yoomer/./src/features/feed/ShowSearch/ShowSearch.module.scss?e982","features/feed/ShowSearch/ShowSearch.tsx","features/feed/Search/Search.tsx","features/feed/SubredditsSidebar/SubredditsSidebar.tsx","views/FeedView.tsx","features/feed/FeedView/FeedView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"App\":\"FeedView_App__zgsy5\",\"Subgrid\":\"FeedView_Subgrid__75u5Z\",\"content\":\"FeedView_content__QdOgv\",\"sortbar\":\"FeedView_sortbar__n148y\",\"fade-in\":\"FeedView_fade-in__pig60\",\"fade-out\":\"FeedView_fade-out__2keX+\",\"scale-up\":\"FeedView_scale-up__MuyWG\",\"scale-down\":\"FeedView_scale-down__oIRzv\",\"slide-out-up\":\"FeedView_slide-out-up__kl3nY\",\"slide-out-down\":\"FeedView_slide-out-down__aXaqW\",\"slide-out-right\":\"FeedView_slide-out-right__nMyQM\",\"slide-out-left\":\"FeedView_slide-out-left__WOs5k\",\"slide-in-up\":\"FeedView_slide-in-up__z97SW\",\"slide-in-down\":\"FeedView_slide-in-down__xT2rM\",\"slide-in-right\":\"FeedView_slide-in-right__BF+0C\",\"slide-in-left\":\"FeedView_slide-in-left__B9J01\",\"shake-x\":\"FeedView_shake-x__Vpw1z\",\"shake-y\":\"FeedView_shake-y__+rq1U\",\"spin\":\"FeedView_spin__ihaO3\",\"ping\":\"FeedView_ping__uazxJ\",\"blink\":\"FeedView_blink__sxNVV\",\"float\":\"FeedView_float__JOPFh\",\"bounce\":\"FeedView_bounce__hswcP\",\"pulse\":\"FeedView_pulse__nakrx\"};","// extracted by mini-css-extract-plugin\nexport default {\"CommonFeed\":\"CommonFeed_CommonFeed__P8jHF\",\"post\":\"CommonFeed_post__UuYoi\",\"fade-in\":\"CommonFeed_fade-in__A+Yrg\",\"fade-out\":\"CommonFeed_fade-out__hQe-O\",\"scale-up\":\"CommonFeed_scale-up__mIQMG\",\"scale-down\":\"CommonFeed_scale-down__NZc-D\",\"slide-out-up\":\"CommonFeed_slide-out-up__zli+3\",\"slide-out-down\":\"CommonFeed_slide-out-down__4Rg3G\",\"slide-out-right\":\"CommonFeed_slide-out-right__H8C91\",\"slide-out-left\":\"CommonFeed_slide-out-left__j8qYE\",\"slide-in-up\":\"CommonFeed_slide-in-up__9F7Ac\",\"slide-in-down\":\"CommonFeed_slide-in-down__Va39g\",\"slide-in-right\":\"CommonFeed_slide-in-right__T9CEB\",\"slide-in-left\":\"CommonFeed_slide-in-left__0F5oa\",\"shake-x\":\"CommonFeed_shake-x__OL0xa\",\"shake-y\":\"CommonFeed_shake-y__wI-84\",\"spin\":\"CommonFeed_spin__NewfF\",\"ping\":\"CommonFeed_ping__gdsZr\",\"blink\":\"CommonFeed_blink__ZiuvU\",\"float\":\"CommonFeed_float__MhmtP\",\"bounce\":\"CommonFeed_bounce__4VSJL\",\"pulse\":\"CommonFeed_pulse__P1VgZ\"};","import React, { useEffect, useState, useRef } from 'react'\r\nimport classes from './CommonFeed.module.scss'\r\n\r\nimport { Loader, Observer } from '@shared/components'\r\nimport { useFetch, useAccessToken } from '@shared/hooks'\r\nimport { ISort } from '@shared/types'\r\n\r\nimport { IPost, Post, trimPost } from '@features/post'\r\n\r\ninterface CommonFeedProps {\r\n  sort: ISort\r\n}\r\n\r\nconst CommonFeed: React.FC<CommonFeedProps> = ({ sort }) => {\r\n  const token = useAccessToken()\r\n\r\n  const [posts, setPosts] = useState<IPost[]>([])\r\n  const afterRef = useRef<string>('')\r\n\r\n  const acceptData = (res: any, shouldReset: boolean) => {\r\n    const data = res.data\r\n\r\n    if (data.after !== afterRef.current) {\r\n      afterRef.current = data.after\r\n\r\n      setPosts(prevPosts => {\r\n        const newPosts = data.children.map((item: any) => trimPost(item.data))\r\n        return shouldReset\r\n          ? [ ...newPosts ]\r\n          : [ ...prevPosts, ...newPosts ]\r\n      })\r\n    }\r\n  }\r\n\r\n  const fetchPosts = useFetch({\r\n    path: `/${sort}`,\r\n    callback: acceptData,\r\n    afterRef\r\n  })\r\n\r\n  useEffect(() => {\r\n    afterRef.current = ''\r\n  }, [sort])\r\n\r\n  useEffect(() => fetchPosts(true), [token, sort])\r\n\r\n  return posts.length\r\n    ? (\r\n        <div className={classes.CommonFeed}>\r\n          {posts && posts.map((post, i) => {\r\n            return <div className={classes.post} key={i}>\r\n              <Post data={post} />\r\n            </div>\r\n          })}\r\n          {posts && token && <Observer onObserve={() => fetchPosts(false)} />}\r\n        </div>\r\n      )\r\n    : <div className={classes.CommonFeed} data-center>\r\n      <Loader />\r\n    </div>\r\n}\r\n\r\nexport default CommonFeed","// extracted by mini-css-extract-plugin\nexport default {\"SubredditsSidebar\":\"SubredditsSidebar_SubredditsSidebar__1l-VI\",\"fade-in\":\"SubredditsSidebar_fade-in__-qKlq\",\"fade-out\":\"SubredditsSidebar_fade-out__PdxnU\",\"scale-up\":\"SubredditsSidebar_scale-up__ACyXK\",\"scale-down\":\"SubredditsSidebar_scale-down__djOmU\",\"slide-out-up\":\"SubredditsSidebar_slide-out-up__qKNEK\",\"slide-out-down\":\"SubredditsSidebar_slide-out-down__j5Kz8\",\"slide-out-right\":\"SubredditsSidebar_slide-out-right__9EI-p\",\"slide-out-left\":\"SubredditsSidebar_slide-out-left__lHsUF\",\"slide-in-up\":\"SubredditsSidebar_slide-in-up__sbsIC\",\"slide-in-down\":\"SubredditsSidebar_slide-in-down__riBoW\",\"slide-in-right\":\"SubredditsSidebar_slide-in-right__HL3aU\",\"slide-in-left\":\"SubredditsSidebar_slide-in-left__3UGmZ\",\"shake-x\":\"SubredditsSidebar_shake-x__+FGS3\",\"shake-y\":\"SubredditsSidebar_shake-y__61wsu\",\"spin\":\"SubredditsSidebar_spin__JIiTZ\",\"ping\":\"SubredditsSidebar_ping__S+iLq\",\"blink\":\"SubredditsSidebar_blink__3SVXg\",\"float\":\"SubredditsSidebar_float__GsCck\",\"bounce\":\"SubredditsSidebar_bounce__yzVVB\",\"pulse\":\"SubredditsSidebar_pulse__rLBee\"};","import { ISubredditCreds } from './types'\r\n\r\nconst trimSubredditCreds = (data: any): ISubredditCreds => {\r\n  return {\r\n    name: data.display_name_prefixed,\r\n    icon: data.icon_img || data.community_icon || null\r\n  }\r\n}\r\n\r\nexport default trimSubredditCreds","// extracted by mini-css-extract-plugin\nexport default {\"communities\":\"ShowCommunities_communities__Qy+c5\",\"list\":\"ShowCommunities_list__RrZon\",\"heading\":\"ShowCommunities_heading__4y0Ky\",\"subreddit\":\"ShowCommunities_subreddit__GJz1H\",\"icon\":\"ShowCommunities_icon__5SO-x\",\"btn\":\"ShowCommunities_btn__-Pls0\",\"fade-in\":\"ShowCommunities_fade-in__rxKC5\",\"fade-out\":\"ShowCommunities_fade-out__YRYZ3\",\"scale-up\":\"ShowCommunities_scale-up__hvOih\",\"scale-down\":\"ShowCommunities_scale-down__RyI3t\",\"slide-out-up\":\"ShowCommunities_slide-out-up__ghc4J\",\"slide-out-down\":\"ShowCommunities_slide-out-down__gFRbT\",\"slide-out-right\":\"ShowCommunities_slide-out-right__TfXFC\",\"slide-out-left\":\"ShowCommunities_slide-out-left__IyyLn\",\"slide-in-up\":\"ShowCommunities_slide-in-up__E3N6J\",\"slide-in-down\":\"ShowCommunities_slide-in-down__SpQ0A\",\"slide-in-right\":\"ShowCommunities_slide-in-right__R5TpO\",\"slide-in-left\":\"ShowCommunities_slide-in-left__shBNu\",\"shake-x\":\"ShowCommunities_shake-x__mKSbB\",\"shake-y\":\"ShowCommunities_shake-y__rWkA4\",\"spin\":\"ShowCommunities_spin__meuJ4\",\"ping\":\"ShowCommunities_ping__SrACj\",\"blink\":\"ShowCommunities_blink__AluPc\",\"float\":\"ShowCommunities_float__amcpS\",\"bounce\":\"ShowCommunities_bounce__OX+rf\",\"pulse\":\"ShowCommunities_pulse__O8La7\"};","import React, { FC } from 'react'\r\nimport { ISubredditCreds } from '../types'\r\nimport classes from './ShowCommunities.module.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface ShowCommunitiesProps {\r\n  fetchSubs(): void,\r\n  isAll: boolean,\r\n  subreddits: ISubredditCreds[]\r\n}\r\n\r\nconst ShowCommunities: FC<ShowCommunitiesProps> = ({ fetchSubs, isAll, subreddits }) => {\r\n  return (\r\n    <div className={classes.communities}>\r\n      <h5 className={classes.heading}>My Subreddits</h5>\r\n      <ul className={classes.list} >\r\n        {subreddits.map((sub, i) => (\r\n          <li className={classes.subreddit} key={i}>\r\n            {sub.icon\r\n              ? <img src={sub.icon} alt=\"\" width={25} height={25} className={classes.icon} />\r\n              : <div className={classes.icon} data-placeholder />}\r\n            <Link to={sub.name} title={sub.name}>{sub.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {!isAll && (\r\n        <button onClick={fetchSubs} className={classes.btn}>load more</button>\r\n        /*<Observer onObserve={fetchSubs} logMessage=\"in communitiess\" />*/\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowCommunities","import React, { useEffect, useState, useRef } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { ISubredditCreds } from \"../types\"\r\nimport IState from '@redux/IState'\r\nimport trimSubredditCreds from '../trimSubredditCreds'\r\nimport ShowCommunities from \"../ShowCommunities/ShowCommunities\"\r\n\r\nimport { useAccessToken } from \"@shared/hooks\"\r\n\r\nconst Communities: React.FC = () => {\r\n  const token = useAccessToken()\r\n  const baseUrl = useSelector((state: IState) => state.baseUrl)\r\n  const afterRef = useRef<string | null>('')\r\n  //const isAll = useRef(false)\r\n  const [subreddits, setSubreddits] = useState<ISubredditCreds[]>([])\r\n  const [isAll, setIsAll] = useState<boolean>(false)\r\n\r\n  const acceptData = (res: any) => {\r\n    const data = res.data\r\n    if (data.after !== afterRef.current) {\r\n      //if (data.after === null) isAll.current = true\r\n      if (data.after === null) setIsAll(true)\r\n      afterRef.current = data.after\r\n\r\n      setSubreddits(prevSubs => ([\r\n        ...prevSubs,\r\n        ...data.children\r\n          .filter((item: any) => item.data.display_name_prefixed.startsWith('r/'))\r\n          .map((item: any) => trimSubredditCreds(item.data))\r\n      ]))\r\n    }\r\n  }\r\n\r\n  const fetchSubs = () => {\r\n    //if (token && token !== 'error' && !isAll.current) {\r\n    if (token && token !== 'error' && afterRef.current !== null) {\r\n      const after = afterRef ? `&after=${afterRef.current}` : ''\r\n      fetch(`${baseUrl}/subreddits/mine/subscriber?raw_json=1${after}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(acceptData)\r\n        .catch(error => console.log(error))\r\n    }\r\n  }\r\n\r\n  useEffect(fetchSubs, [token])\r\n\r\n  const params = { fetchSubs, isAll, subreddits }\r\n  return <ShowCommunities {...params} />\r\n}\r\n\r\nexport default Communities","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ShowSearch_container__Y32e+\",\"input\":\"ShowSearch_input__xfNqu\",\"btn\":\"ShowSearch_btn__lc0Ra\",\"list\":\"ShowSearch_list__JZQ4-\",\"backdrop\":\"ShowSearch_backdrop__WD0pt\",\"fade-in\":\"ShowSearch_fade-in__WNCMK\",\"fade-out\":\"ShowSearch_fade-out__47srm\",\"scale-up\":\"ShowSearch_scale-up__X3qBW\",\"scale-down\":\"ShowSearch_scale-down__uj6F6\",\"slide-out-up\":\"ShowSearch_slide-out-up__nHE0o\",\"slide-out-down\":\"ShowSearch_slide-out-down__YR9+R\",\"slide-out-right\":\"ShowSearch_slide-out-right__Eq3K3\",\"slide-out-left\":\"ShowSearch_slide-out-left__u+Jnm\",\"slide-in-up\":\"ShowSearch_slide-in-up__xeeiN\",\"slide-in-down\":\"ShowSearch_slide-in-down__10xMF\",\"slide-in-right\":\"ShowSearch_slide-in-right__xyYdo\",\"slide-in-left\":\"ShowSearch_slide-in-left__JliJ5\",\"shake-x\":\"ShowSearch_shake-x__L-X1V\",\"shake-y\":\"ShowSearch_shake-y__vp4Of\",\"spin\":\"ShowSearch_spin__DSddx\",\"ping\":\"ShowSearch_ping__+56AL\",\"blink\":\"ShowSearch_blink__9nX9z\",\"float\":\"ShowSearch_float__s0O+4\",\"bounce\":\"ShowSearch_bounce__5yHuK\",\"pulse\":\"ShowSearch_pulse__cUc9a\"};","import React, { FC } from 'react'\r\nimport classes from './ShowSearch.module.scss'\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface ShowSearchProps {\r\n  popupData: any[],\r\n  searchSubs(input: string): void,\r\n  clear(): void,\r\n  input: string,\r\n  setInput(value: string): void\r\n}\r\n\r\nconst ShowSearch: FC<ShowSearchProps> = ({ popupData, searchSubs, clear, input, setInput }) => (\r\n  <div className={classes.container}>\r\n    <input \r\n      type=\"text\" \r\n      value={input} \r\n      onChange={e => setInput(e.target.value)} \r\n      placeholder=\"search subreddits\" \r\n      className={classes.input}\r\n    />\r\n    <button onClick={() => searchSubs(input)} className={classes.btn}>\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n      <circle cx=\"11\" cy=\"11\" r=\"8\" stroke=\"currentColor\" fill=\"none\"></circle>\r\n      <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" stroke=\"currentColor\"></line>\r\n    </svg>\r\n    </button>\r\n    {!!popupData?.length && (\r\n      <>\r\n        <div className={classes.backdrop} onClick={clear}/>\r\n        <ul className={classes.list}>\r\n        {popupData.map((item, i) => {\r\n          return <li key={i}>\r\n            <Link to={`/r/${item.name}`}>/r/{item.name}</Link>\r\n          </li>\r\n        })}\r\n      </ul>\r\n      </>\r\n    )}\r\n  </div>\r\n)\r\n\r\nexport default ShowSearch","import React, { useState } from \"react\"\r\nimport { useFetch } from \"@shared/hooks\"\r\nimport ShowSearch from \"../ShowSearch/ShowSearch\"\r\n\r\nconst Search: React.FC = () => {\r\n  const [input, setInput] = useState<string>('')\r\n  const [popupData, setPopupData] = useState<any[]>([])\r\n\r\n  const acceptData = (data: any) => {\r\n    const arr = data.subreddits\r\n      .sort((a: any, b: any) => a.subscriber_count - b.subscriber_count)\r\n    setPopupData(arr)\r\n  }\r\n\r\n  const searchSubs = useFetch({\r\n    path: `/api/search_subreddits`,\r\n    callback: acceptData,\r\n    body: new URLSearchParams(`exact=false&include_over_18=true&query=${input}`)\r\n  })\r\n\r\n  const clear = () => setPopupData([])\r\n  const params = { searchSubs, popupData, input, setInput, clear }\r\n  return <ShowSearch {...params} />\r\n}\r\n\r\nexport default Search","import React from \"react\"\r\nimport classes from './SubredditsSidebar.module.scss'\r\n\r\nimport Communities from \"../Communities/Communities\"\r\nimport Search from \"../Search/Search\"\r\n\r\nconst SubredditsSidebar: React.FC = () => {\r\n  return (\r\n    <aside className={classes.SubredditsSidebar}>\r\n      <Search />\r\n      <hr />\r\n      <Communities />\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default SubredditsSidebar","import {FeedView} from '@features/feed'\r\nexport default FeedView","import React, { useState } from 'react'\r\nimport classes from './FeedView.module.scss'\r\n\r\nimport CommonFeed from '../CommonFeed/CommonFeed';\r\nimport SubredditsSidebar from '../SubredditsSidebar/SubredditsSidebar';\r\n\r\nimport { SortBar, Nav } from '@shared/components';\r\nimport { ISort } from '@shared/types';\r\n\r\nconst FeedView: React.FC = () => {\r\n  const [sort, setSort] = useState<ISort>('best')\r\n\r\n  const changeSort = (str: ISort) => {\r\n    setSort(str)\r\n  }\r\n\r\n  return (\r\n    <main className={classes.App}>\r\n      <Nav />\r\n      <section data-container className={classes.content}>\r\n        <div>\r\n          <div className={classes.sortbar}>\r\n            <SortBar changeSort={changeSort} sort={sort} />\r\n          </div>\r\n          <CommonFeed sort={sort} />\r\n        </div>\r\n\r\n        <SubredditsSidebar />\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default FeedView;"],"names":["sort","token","useAccessToken","useState","posts","setPosts","afterRef","useRef","fetchPosts","useFetch","path","callback","res","shouldReset","data","after","current","prevPosts","newPosts","children","map","item","trimPost","useEffect","length","className","classes","post","i","onObserve","name","display_name_prefixed","icon","icon_img","community_icon","fetchSubs","isAll","subreddits","sub","src","alt","width","height","to","title","onClick","baseUrl","useSelector","state","setSubreddits","setIsAll","acceptData","prevSubs","filter","startsWith","trimSubredditCreds","fetch","method","headers","Authorization","then","json","catch","error","console","log","params","popupData","searchSubs","clear","input","setInput","type","value","onChange","e","target","placeholder","xmlns","viewBox","fill","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","stroke","x1","y1","x2","y2","setPopupData","arr","a","b","subscriber_count","body","URLSearchParams","setSort","changeSort","str"],"sourceRoot":""}