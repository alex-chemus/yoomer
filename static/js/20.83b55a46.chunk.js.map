{"version":3,"file":"static/js/20.83b55a46.chunk.js","mappings":"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","sources":["features/subreddit/trimSubreddit.ts","webpack://yoomer/./src/features/subreddit/ShowSubreddit/ShowSubreddit.module.scss?1ee2","webpack://yoomer/./src/features/subreddit/SubredditFeed/SubredditFeed.module.scss?2095","features/subreddit/SubredditFeed/SubredditFeed.tsx","webpack://yoomer/./src/features/subreddit/SubredditHeader/SubredditHeader.module.scss?9d0b","webpack://yoomer/./src/features/subreddit/Subscription/Subscription.module.scss?ab9c","features/subreddit/Subscription/Subscription.tsx","features/subreddit/SubredditHeader/SubredditHeader.tsx","webpack://yoomer/./src/features/subreddit/SubredditAside/SubredditAside.module.scss?4721","webpack://yoomer/./src/features/subreddit/ShowRules/ShowRules.module.scss?35c1","features/subreddit/ShowRules/ShowRules.tsx","features/subreddit/Rules/Rules.tsx","features/subreddit/SubredditAside/SubredditAside.tsx","features/subreddit/ShowSubreddit/ShowSubreddit.tsx","features/subreddit/Subreddit/Subreddit.tsx","views/Subreddit.tsx"],"sourcesContent":["import { ISubreddit } from \"./types\";\r\n\r\nconst trimSubreddit = (data: any): ISubreddit => {\r\n  return {\r\n    icon_img: data.icon_img,\r\n    community_img: data.community_img,\r\n    active_user_count: data.active_user_count,\r\n    subscribers: data.subscribers,\r\n    title: data.title,\r\n    public_description: data.public_description,\r\n    description_html: data.description_html,\r\n    user_flair_richtext: data.user_flair_richtext,\r\n    user_flair_background_color: data.user_flair_background_color,\r\n    user_flair_text_color: data.user_flair_text_color,\r\n    banner_background_image: data.banner_background_image,\r\n    banner_background_color: data.banner_background_color,\r\n    created: data.created,\r\n    over18: data.over18,\r\n    user_is_subscriber: data.user_is_subscriber\r\n  }\r\n}\r\n\r\nexport default trimSubreddit","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"ShowSubreddit_loader__+Z0Bw\",\"contentGrid\":\"ShowSubreddit_contentGrid__KwB2M\",\"mainContent\":\"ShowSubreddit_mainContent__pw0gl\",\"sortbar\":\"ShowSubreddit_sortbar__vncHy\",\"fade-in\":\"ShowSubreddit_fade-in__qyoHK\",\"fade-out\":\"ShowSubreddit_fade-out__cexP3\",\"scale-up\":\"ShowSubreddit_scale-up__yro4y\",\"scale-down\":\"ShowSubreddit_scale-down__oaio7\",\"slide-out-up\":\"ShowSubreddit_slide-out-up__Ddi6o\",\"slide-out-down\":\"ShowSubreddit_slide-out-down__-zF1B\",\"slide-out-right\":\"ShowSubreddit_slide-out-right__P-tij\",\"slide-out-left\":\"ShowSubreddit_slide-out-left__W0+EK\",\"slide-in-up\":\"ShowSubreddit_slide-in-up__8OMDj\",\"slide-in-down\":\"ShowSubreddit_slide-in-down__kXU59\",\"slide-in-right\":\"ShowSubreddit_slide-in-right__PKgNz\",\"slide-in-left\":\"ShowSubreddit_slide-in-left__cEDr8\",\"shake-x\":\"ShowSubreddit_shake-x__NiqCc\",\"shake-y\":\"ShowSubreddit_shake-y__Tp3om\",\"spin\":\"ShowSubreddit_spin__phk+f\",\"ping\":\"ShowSubreddit_ping__7dM5d\",\"blink\":\"ShowSubreddit_blink__dSOrF\",\"float\":\"ShowSubreddit_float__3hKTv\",\"bounce\":\"ShowSubreddit_bounce__eGTTw\",\"pulse\":\"ShowSubreddit_pulse__03WiT\"};","// extracted by mini-css-extract-plugin\nexport default {\"postWrapper\":\"SubredditFeed_postWrapper__ItOAu\",\"fade-in\":\"SubredditFeed_fade-in__WzShQ\",\"fade-out\":\"SubredditFeed_fade-out__COIOj\",\"scale-up\":\"SubredditFeed_scale-up__ipDYy\",\"scale-down\":\"SubredditFeed_scale-down__SSFp6\",\"slide-out-up\":\"SubredditFeed_slide-out-up__Ognuf\",\"slide-out-down\":\"SubredditFeed_slide-out-down__PlixN\",\"slide-out-right\":\"SubredditFeed_slide-out-right__QoybU\",\"slide-out-left\":\"SubredditFeed_slide-out-left__7Hg1g\",\"slide-in-up\":\"SubredditFeed_slide-in-up__n3fuR\",\"slide-in-down\":\"SubredditFeed_slide-in-down__hzvzw\",\"slide-in-right\":\"SubredditFeed_slide-in-right__-47hk\",\"slide-in-left\":\"SubredditFeed_slide-in-left__OV3UX\",\"shake-x\":\"SubredditFeed_shake-x__3-cJi\",\"shake-y\":\"SubredditFeed_shake-y__UB0q5\",\"spin\":\"SubredditFeed_spin__kjSLl\",\"ping\":\"SubredditFeed_ping__rMXed\",\"blink\":\"SubredditFeed_blink__FpDMX\",\"float\":\"SubredditFeed_float__nICHL\",\"bounce\":\"SubredditFeed_bounce__kros-\",\"pulse\":\"SubredditFeed_pulse__8LBYy\"};","import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport classes from './SubredditFeed.module.scss'\r\nimport { SubredditContext } from '../Subreddit/Subreddit'\r\n\r\nimport { Observer, Loader } from '@shared/components'\r\nimport { useAccessToken, useFetch } from '@shared/hooks'\r\nimport { ISort } from '@shared/types'\r\n\r\nimport { IPost, Post, trimPost } from '@features/post'\r\n\r\ninterface SubredditFeedProps {\r\n  sort: ISort\r\n}\r\n\r\nconst SubredditFeed: React.FC<SubredditFeedProps> = ({ sort }) => {\r\n  const { subreddit } = useContext(SubredditContext)!\r\n  const token = useAccessToken()\r\n\r\n  const [posts, setPosts] = useState<IPost[]>([])\r\n  const afterRef = useRef<string>('')\r\n\r\n  const acceptData = (res: any, shouldReset: boolean) => {\r\n    const data = res.data\r\n\r\n    if (data.after !== afterRef.current) {\r\n      afterRef.current = data.after\r\n\r\n      setPosts(prevPosts => {\r\n        const newPosts = data.children.map((item: any) => trimPost(item.data)) \r\n        return shouldReset\r\n          ? [ ...newPosts ]\r\n          : [ ...prevPosts, ...newPosts ]\r\n      })\r\n    }\r\n  }\r\n\r\n  const fetchPosts = useFetch({\r\n    path: `/r/${subreddit}/${sort}`,\r\n    callback: acceptData,\r\n    afterRef\r\n  })\r\n\r\n  useEffect(() => fetchPosts(true), [token, sort])\r\n\r\n  return posts.length\r\n    ? (\r\n      <section>\r\n        {posts && posts.map((post, i) => {\r\n          return <div className={classes.postWrapper}>\r\n            <Post key={i} data={post} />\r\n          </div>\r\n        })}\r\n        {posts && token && <Observer \r\n          onObserve={() => fetchPosts(false)}\r\n          logMessage=\"in subreddit feed\"\r\n        />}\r\n      </section>\r\n    )\r\n    : <Loader />\r\n}\r\n\r\nexport default SubredditFeed","// extracted by mini-css-extract-plugin\nexport default {\"banner\":\"SubredditHeader_banner__ze+Sd\",\"header\":\"SubredditHeader_header__QLivL\",\"headerInfo\":\"SubredditHeader_headerInfo__RUFSQ\",\"subCreds\":\"SubredditHeader_subCreds__KoyiN\",\"fade-in\":\"SubredditHeader_fade-in__iOBxs\",\"fade-out\":\"SubredditHeader_fade-out__8ORN0\",\"scale-up\":\"SubredditHeader_scale-up__hgWbY\",\"scale-down\":\"SubredditHeader_scale-down__l7XZj\",\"slide-out-up\":\"SubredditHeader_slide-out-up__gX6iL\",\"slide-out-down\":\"SubredditHeader_slide-out-down__JmjYY\",\"slide-out-right\":\"SubredditHeader_slide-out-right__q63gb\",\"slide-out-left\":\"SubredditHeader_slide-out-left__MloO5\",\"slide-in-up\":\"SubredditHeader_slide-in-up__By-XU\",\"slide-in-down\":\"SubredditHeader_slide-in-down__OlH9s\",\"slide-in-right\":\"SubredditHeader_slide-in-right__MTz+P\",\"slide-in-left\":\"SubredditHeader_slide-in-left__4HxP0\",\"shake-x\":\"SubredditHeader_shake-x__ttVsO\",\"shake-y\":\"SubredditHeader_shake-y__4W03O\",\"spin\":\"SubredditHeader_spin__LNSO1\",\"ping\":\"SubredditHeader_ping__-aZqU\",\"blink\":\"SubredditHeader_blink__hef0z\",\"float\":\"SubredditHeader_float__1rBOY\",\"bounce\":\"SubredditHeader_bounce__AnjtY\",\"pulse\":\"SubredditHeader_pulse__azj+L\"};","// extracted by mini-css-extract-plugin\nexport default {\"subBtn\":\"Subscription_subBtn__7pDvx\",\"fade-in\":\"Subscription_fade-in__1KG-z\",\"fade-out\":\"Subscription_fade-out__fQrhq\",\"scale-up\":\"Subscription_scale-up__dIy3c\",\"scale-down\":\"Subscription_scale-down__f1kLG\",\"slide-out-up\":\"Subscription_slide-out-up__LY8k7\",\"slide-out-down\":\"Subscription_slide-out-down__o8pHD\",\"slide-out-right\":\"Subscription_slide-out-right__CLNDN\",\"slide-out-left\":\"Subscription_slide-out-left__BTKuf\",\"slide-in-up\":\"Subscription_slide-in-up__nWKVP\",\"slide-in-down\":\"Subscription_slide-in-down__-5hyw\",\"slide-in-right\":\"Subscription_slide-in-right__xu8A9\",\"slide-in-left\":\"Subscription_slide-in-left__gCUu8\",\"shake-x\":\"Subscription_shake-x__-TN0x\",\"shake-y\":\"Subscription_shake-y__quFLM\",\"spin\":\"Subscription_spin__TZO89\",\"ping\":\"Subscription_ping__ki6KT\",\"blink\":\"Subscription_blink__ZF0S9\",\"float\":\"Subscription_float__yNevw\",\"bounce\":\"Subscription_bounce__Rn+oR\",\"pulse\":\"Subscription_pulse__vPIrx\"};","import React, { useState } from 'react'\r\nimport classes from './Subscription.module.scss'\r\n\r\nimport { useFetch } from '@shared/hooks'\r\n\r\ninterface SubscriptionProps {\r\n  isSubbed: boolean,\r\n  subreddit: string\r\n}\r\n\r\nconst Subscription: React.FC<SubscriptionProps> = ({ isSubbed, subreddit }) => {\r\n  const [subbed, setSubbed] = useState(isSubbed)\r\n  const action = useFetch({\r\n    path: '/api/subscribe',\r\n    callback: () => setSubbed(prev => !prev),\r\n    body: new URLSearchParams(`action=${subbed ? 'unsub' : 'sub'}&sr_name=${subreddit}`)\r\n  })\r\n\r\n  return <button onClick={action} className={classes.subBtn}>{\r\n    subbed\r\n      ? 'Unsubscribe'\r\n      : 'Subscribe'\r\n  }</button>\r\n}\r\n\r\nexport default Subscription","import React, { FC, useContext } from 'react'\r\nimport classes from './SubredditHeader.module.scss'\r\nimport Subscription from '../Subscription/Subscription'\r\nimport { SubredditContext } from '../Subreddit/Subreddit'\r\n\r\ninterface SubredditHeaderProps {\r\n  banner: string,\r\n  icon: string,\r\n  title: string,\r\n  subscribed: boolean\r\n}\r\n\r\nconst SubredditHeader: FC<SubredditHeaderProps> = ({ banner, icon, title, subscribed }) => {\r\n  const { subreddit } = useContext(SubredditContext)!\r\n\r\n  return (\r\n    <header className={classes.header}>\r\n      {banner && (\r\n        <img src={banner} alt=\"Banner\" className={classes.banner} />\r\n      )}\r\n      <div \r\n        data-container \r\n        className={classes.headerInfo} \r\n        data-offset={banner ? 'true' : 'false'}\r\n      >\r\n        <div className={classes.subCreds}>\r\n          {icon \r\n            ? <img src={icon} alt=\"\" />\r\n            : <div data-placeholder />}\r\n          <div> \r\n            <h2 title={title}>{title}</h2>\r\n            <p>r/{subreddit}</p>\r\n          </div>\r\n        </div>\r\n        <Subscription isSubbed={subscribed} subreddit={subreddit!} />\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default SubredditHeader","// extracted by mini-css-extract-plugin\nexport default {\"sidebar\":\"SubredditAside_sidebar__s9x8H\",\"aboutSection\":\"SubredditAside_aboutSection__m8Fcf\",\"description\":\"SubredditAside_description__kK0uK\",\"flair\":\"SubredditAside_flair__8ElVV\",\"rulesWrapper\":\"SubredditAside_rulesWrapper__GFaEc\",\"fade-in\":\"SubredditAside_fade-in__23nx+\",\"fade-out\":\"SubredditAside_fade-out__fN7ie\",\"scale-up\":\"SubredditAside_scale-up__5ZIpo\",\"scale-down\":\"SubredditAside_scale-down__Gi0gd\",\"slide-out-up\":\"SubredditAside_slide-out-up__afOcw\",\"slide-out-down\":\"SubredditAside_slide-out-down__sgdS7\",\"slide-out-right\":\"SubredditAside_slide-out-right__yCW+7\",\"slide-out-left\":\"SubredditAside_slide-out-left__18ClK\",\"slide-in-up\":\"SubredditAside_slide-in-up__2CUmP\",\"slide-in-down\":\"SubredditAside_slide-in-down__MqmfU\",\"slide-in-right\":\"SubredditAside_slide-in-right__cHraE\",\"slide-in-left\":\"SubredditAside_slide-in-left__V77-j\",\"shake-x\":\"SubredditAside_shake-x__gcVPr\",\"shake-y\":\"SubredditAside_shake-y__LbOS-\",\"spin\":\"SubredditAside_spin__He3nh\",\"ping\":\"SubredditAside_ping__Npwtj\",\"blink\":\"SubredditAside_blink__xMOdD\",\"float\":\"SubredditAside_float__nrUu1\",\"bounce\":\"SubredditAside_bounce__CHzWK\",\"pulse\":\"SubredditAside_pulse__csTks\"};","// extracted by mini-css-extract-plugin\nexport default {\"rules\":\"ShowRules_rules__NiEA1\",\"listItem\":\"ShowRules_listItem__lfiVB\",\"accordion\":\"ShowRules_accordion__EZKUN\",\"panel\":\"ShowRules_panel__YYA3n\",\"fade-in\":\"ShowRules_fade-in__OmJ2j\",\"fade-out\":\"ShowRules_fade-out__nMA8H\",\"scale-up\":\"ShowRules_scale-up__WhB0S\",\"scale-down\":\"ShowRules_scale-down__6fHSS\",\"slide-out-up\":\"ShowRules_slide-out-up__FsFGF\",\"slide-out-down\":\"ShowRules_slide-out-down__Yszp-\",\"slide-out-right\":\"ShowRules_slide-out-right__E5RMs\",\"slide-out-left\":\"ShowRules_slide-out-left__ZDjTS\",\"slide-in-up\":\"ShowRules_slide-in-up__85eyq\",\"slide-in-down\":\"ShowRules_slide-in-down__gcNCX\",\"slide-in-right\":\"ShowRules_slide-in-right__0MjvV\",\"slide-in-left\":\"ShowRules_slide-in-left__lDeV2\",\"shake-x\":\"ShowRules_shake-x__knoiw\",\"shake-y\":\"ShowRules_shake-y__XBclC\",\"spin\":\"ShowRules_spin__8Vkyd\",\"ping\":\"ShowRules_ping__EXXFZ\",\"blink\":\"ShowRules_blink__WFElB\",\"float\":\"ShowRules_float__R+R2M\",\"bounce\":\"ShowRules_bounce__pTSq9\",\"pulse\":\"ShowRules_pulse__fIcHJ\"};","import React, { FC } from 'react'\r\nimport { IRule } from '../types'\r\nimport { Loader } from '@shared/components'\r\nimport classes from './ShowRules.module.scss'\r\n\r\ninterface ShowRulesProps {\r\n  rules: IRule[] | null,\r\n  toggleRule(e: React.MouseEvent): void\r\n}\r\n\r\nconst ShowRules: FC<ShowRulesProps> = ({ rules, toggleRule }) => {\r\n  if (rules) {\r\n    return (\r\n      <ul className={classes.rules}>{\r\n        rules.map((rule, i) => {\r\n          return (\r\n            <li className={classes.listItem} key={i}>\r\n              <h5 className={classes.accordion} onClick={e => toggleRule(e)}>{rule.short_name}</h5>\r\n              <div \r\n                dangerouslySetInnerHTML={{__html: rule.description_html}}\r\n                className={classes.panel}\r\n              />\r\n            </li>\r\n          )\r\n        })\r\n      }</ul>\r\n    )\r\n  } else {\r\n    return <Loader />\r\n  }\r\n}\r\n\r\nexport default ShowRules","import React, { useEffect, useRef, useState } from 'react'\r\nimport { IRule } from '../types'\r\n\r\nimport { useFetch } from '@shared/hooks'\r\nimport ShowRules from '../ShowRules/ShowRules'\r\n\r\ninterface RulesProps {\r\n  subreddit: string\r\n}\r\n\r\nconst Rules: React.FC<RulesProps> = ({ subreddit }) => {\r\n  const [rules, setRules] = useState<IRule[] | null>(null)\r\n\r\n  const acceptData = (data: any) => {\r\n    //console.log(data.rules)\r\n    setRules(data.rules.map((rule: any) => ({\r\n      short_name: rule.short_name,\r\n      description_html: rule.description_html\r\n    })))\r\n  }\r\n\r\n  useEffect(useFetch({\r\n    path: `/r/${subreddit}/about/rules`,\r\n    callback: acceptData\r\n  }), [])\r\n\r\n  const toggleRule = (e: React.MouseEvent) => {\r\n    const panel = e.currentTarget.nextElementSibling as HTMLElement\r\n    if (panel.style.maxHeight) {\r\n      panel.style.maxHeight = ''\r\n    } else {\r\n      panel.style.maxHeight = panel.scrollHeight + \"px\"\r\n    }\r\n  }\r\n\r\n  return <ShowRules toggleRule={toggleRule} rules={rules} />\r\n}\r\n\r\nexport default Rules","import React, { FC, useContext } from 'react'\r\nimport classes from './SubredditAside.module.scss'\r\nimport { SubredditContext } from '../Subreddit/Subreddit'\r\n\r\nimport { Flair } from '@shared/components'\r\nimport Rules from '../Rules/Rules'\r\n\r\ninterface SubredditAsideProps {\r\n  flair: {\r\n    bgcolor: string,\r\n    color: string,\r\n    richtext: any[]\r\n  },\r\n  descprition: string,\r\n  subscribers: number,\r\n  activeCount: number,\r\n}\r\n\r\nconst SubredditAside: FC<SubredditAsideProps> = ({ \r\n  flair, descprition, subscribers, activeCount\r\n}) => {\r\n  const { subreddit, getDate, hasFlair } = useContext(SubredditContext)!\r\n\r\n  return (\r\n    <aside className={classes.sidebar}>\r\n      <section className={classes.aboutSection}>\r\n        <h3>About</h3>\r\n        <p className={classes.description}> {descprition} </p>\r\n        <p>Subscribers: <b>{subscribers}</b></p>\r\n        <p>Active users: <b>{activeCount}</b></p>\r\n        <p>Created: <b>{getDate()}</b></p>\r\n      </section>\r\n\r\n      {hasFlair() && (\r\n        <hr data-separator />\r\n      )}\r\n\r\n      {hasFlair() && (\r\n        <div className={classes.flair}>\r\n          <p>My Flair:&nbsp;</p>\r\n          <Flair \r\n            bgcolor={flair.bgcolor}\r\n            richtext={flair.richtext}\r\n            color={flair.color}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <hr data-separator />\r\n\r\n      <div className={classes.rulesWrapper}>\r\n        <h3>Rules</h3>\r\n        <Rules subreddit={subreddit!} />\r\n      </div>\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default SubredditAside","import React, { FC, useContext, useState } from 'react'\r\nimport { ISubreddit } from '../types'\r\nimport classes from './ShowSubreddit.module.scss'\r\n\r\nimport SubredditFeed from \"../SubredditFeed/SubredditFeed\"\r\nimport SubredditHeader from \"../SubredditHeader/SubredditHeader\"\r\n\r\nimport { SortBar, Loader, Nav } from '@shared/components'\r\nimport { ISort } from \"@shared/types\"\r\nimport SubredditAside from '../SubredditAside/SubredditAside'\r\nimport { SubredditContext } from '../Subreddit/Subreddit'\r\n\r\ninterface ShowSubredditProps {\r\n  data: ISubreddit | undefined,\r\n}\r\n\r\nconst ShowSubreddit: FC<ShowSubredditProps> = ({ data }) => {\r\n  const [sort, setSort] = useState<ISort>('best')\r\n  const { subreddit, getDate, hasFlair } = useContext(SubredditContext)!\r\n\r\n  return data\r\n    ? (\r\n      <main>\r\n        <Nav />\r\n        <SubredditHeader \r\n          banner={data.banner_background_image}\r\n          icon={data.community_img || data.icon_img}\r\n          title={data.title}\r\n          subscribed={data.user_is_subscriber}\r\n        />\r\n\r\n        <section className={classes.contentGrid} data-container>\r\n          <section className={classes.mainContent}>\r\n            <div className={classes.sortbar}>\r\n              <SortBar changeSort={(val: ISort) => setSort(val)} sort={sort} />\r\n            </div>\r\n            <SubredditFeed sort={sort} />\r\n          </section>\r\n\r\n          <SubredditAside \r\n            flair={{\r\n              bgcolor: data.user_flair_background_color,\r\n              color: data.user_flair_text_color,\r\n              richtext: data.user_flair_richtext\r\n            }}\r\n            descprition={data.public_description}\r\n            subscribers={data.subscribers}\r\n            activeCount={data.active_user_count}\r\n          />\r\n        </section>\r\n      </main>\r\n    )\r\n    : <div>\r\n      <Nav />\r\n      <div className={classes.loader}>\r\n        <Loader />\r\n      </div>\r\n    </div>\r\n}\r\n\r\nexport default ShowSubreddit","import React, { useEffect, useState, createContext } from \"react\"\r\nimport { useParams, useNavigate } from \"react-router-dom\"\r\nimport { ISubreddit } from \"../types\"\r\nimport trimSubreddit from \"../trimSubreddit\"\r\n\r\nimport { useAccessToken, useFetch } from '@shared/hooks'\r\nimport ShowSubreddit from \"../ShowSubreddit/ShowSubreddit\"\r\n\r\ninterface ISubredditContext {\r\n  getDate(): string,\r\n  hasFlair(): boolean,\r\n  subreddit: string\r\n}\r\n\r\nexport const SubredditContext = createContext<ISubredditContext | null>(null)\r\n\r\nconst Subreddit: React.FC = () => {\r\n  const token = useAccessToken()\r\n  const { subreddit } = useParams()\r\n  const navigate = useNavigate()\r\n  if (typeof subreddit !== 'undefined') navigate('/', { replace: true })\r\n\r\n  const [subData, setSubData] = useState<ISubreddit>()\r\n\r\n  const acceptData = (data: any) => {\r\n    setSubData(trimSubreddit(data.data))\r\n  }\r\n\r\n  const getDate = () => {\r\n    const date = new Date(subData!.created * 1000)\r\n    return `${date.getDate()}.${date.getMonth()+1}.${date.getFullYear()}`\r\n  }\r\n\r\n  const fetchSubreddit = useFetch({\r\n    path: `/r/${subreddit}/about`,\r\n    callback: acceptData\r\n  })\r\n\r\n  useEffect(fetchSubreddit, [token])\r\n\r\n  const hasFlair = () => \r\n    !!subData?.user_flair_background_color \r\n    || !!subData?.user_flair_text_color \r\n    || subData?.user_flair_richtext.length !== 0\r\n\r\n  return <SubredditContext.Provider value={{\r\n    subreddit: subreddit!,\r\n    getDate, hasFlair\r\n  }}>\r\n    <ShowSubreddit data={subData} />\r\n  </SubredditContext.Provider>\r\n}\r\n\r\nexport default Subreddit","import { Subreddit } from '@features/subreddit'\r\nexport default Subreddit"],"names":["data","icon_img","community_img","active_user_count","subscribers","title","public_description","description_html","user_flair_richtext","user_flair_background_color","user_flair_text_color","banner_background_image","banner_background_color","created","over18","user_is_subscriber","sort","subreddit","useContext","SubredditContext","token","useAccessToken","useState","posts","setPosts","afterRef","useRef","fetchPosts","useFetch","path","callback","res","shouldReset","after","current","prevPosts","newPosts","children","map","item","trimPost","useEffect","length","post","i","className","classes","onObserve","logMessage","isSubbed","subbed","setSubbed","action","prev","body","URLSearchParams","onClick","banner","icon","subscribed","src","alt","rules","toggleRule","rule","e","short_name","dangerouslySetInnerHTML","__html","setRules","panel","currentTarget","nextElementSibling","style","maxHeight","scrollHeight","flair","descprition","activeCount","getDate","hasFlair","bgcolor","richtext","color","setSort","changeSort","val","createContext","useParams","navigate","useNavigate","replace","subData","setSubData","fetchSubreddit","trimSubreddit","Provider","value","date","Date","getMonth","getFullYear"],"sourceRoot":""}