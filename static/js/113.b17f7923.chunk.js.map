{"version":3,"file":"static/js/113.b17f7923.chunk.js","mappings":"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","sources":["webpack://yoomer/./src/features/feed/FeedView/FeedView.module.scss?add6","webpack://yoomer/./src/features/feed/CommonFeed/CommonFeed.module.scss?054f","features/feed/CommonFeed/CommonFeed.tsx","webpack://yoomer/./src/features/feed/SubredditsSidebar/SubredditsSidebar.module.scss?90fc","features/feed/trimSubredditCreds.ts","webpack://yoomer/./src/features/feed/Communities/Communities.module.scss?53e8","features/feed/Communities/Communities.tsx","webpack://yoomer/./src/features/feed/Search/Search.module.scss?93d0","features/feed/Search/Search.tsx","features/feed/SubredditsSidebar/SubredditsSidebar.tsx","views/FeedView.tsx","features/feed/FeedView/FeedView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"App\":\"FeedView_App__zgsy5\",\"Subgrid\":\"FeedView_Subgrid__75u5Z\",\"content\":\"FeedView_content__QdOgv\",\"sortbar\":\"FeedView_sortbar__n148y\",\"fade-in\":\"FeedView_fade-in__pig60\",\"fade-out\":\"FeedView_fade-out__2keX+\",\"scale-up\":\"FeedView_scale-up__MuyWG\",\"scale-down\":\"FeedView_scale-down__oIRzv\",\"slide-out-up\":\"FeedView_slide-out-up__kl3nY\",\"slide-out-down\":\"FeedView_slide-out-down__aXaqW\",\"slide-out-right\":\"FeedView_slide-out-right__nMyQM\",\"slide-out-left\":\"FeedView_slide-out-left__WOs5k\",\"slide-in-up\":\"FeedView_slide-in-up__z97SW\",\"slide-in-down\":\"FeedView_slide-in-down__xT2rM\",\"slide-in-right\":\"FeedView_slide-in-right__BF+0C\",\"slide-in-left\":\"FeedView_slide-in-left__B9J01\",\"shake-x\":\"FeedView_shake-x__Vpw1z\",\"shake-y\":\"FeedView_shake-y__+rq1U\",\"spin\":\"FeedView_spin__ihaO3\",\"ping\":\"FeedView_ping__uazxJ\",\"blink\":\"FeedView_blink__sxNVV\",\"float\":\"FeedView_float__JOPFh\",\"bounce\":\"FeedView_bounce__hswcP\",\"pulse\":\"FeedView_pulse__nakrx\"};","// extracted by mini-css-extract-plugin\nexport default {\"CommonFeed\":\"CommonFeed_CommonFeed__P8jHF\",\"post\":\"CommonFeed_post__UuYoi\",\"fade-in\":\"CommonFeed_fade-in__A+Yrg\",\"fade-out\":\"CommonFeed_fade-out__hQe-O\",\"scale-up\":\"CommonFeed_scale-up__mIQMG\",\"scale-down\":\"CommonFeed_scale-down__NZc-D\",\"slide-out-up\":\"CommonFeed_slide-out-up__zli+3\",\"slide-out-down\":\"CommonFeed_slide-out-down__4Rg3G\",\"slide-out-right\":\"CommonFeed_slide-out-right__H8C91\",\"slide-out-left\":\"CommonFeed_slide-out-left__j8qYE\",\"slide-in-up\":\"CommonFeed_slide-in-up__9F7Ac\",\"slide-in-down\":\"CommonFeed_slide-in-down__Va39g\",\"slide-in-right\":\"CommonFeed_slide-in-right__T9CEB\",\"slide-in-left\":\"CommonFeed_slide-in-left__0F5oa\",\"shake-x\":\"CommonFeed_shake-x__OL0xa\",\"shake-y\":\"CommonFeed_shake-y__wI-84\",\"spin\":\"CommonFeed_spin__NewfF\",\"ping\":\"CommonFeed_ping__gdsZr\",\"blink\":\"CommonFeed_blink__ZiuvU\",\"float\":\"CommonFeed_float__MhmtP\",\"bounce\":\"CommonFeed_bounce__4VSJL\",\"pulse\":\"CommonFeed_pulse__P1VgZ\"};","import React, { useEffect, useState, useRef } from 'react'\r\nimport IState from '@redux/IState'\r\nimport { useSelector } from 'react-redux'\r\nimport classes from './CommonFeed.module.scss'\r\n\r\nimport { Loader, Observer } from '@shared/components'\r\nimport { useFetch, useAccessToken } from '@shared/hooks'\r\nimport { ISort } from '@shared/types'\r\n\r\nimport { IPost, Post, trimPost } from '@features/post'\r\n\r\ninterface CommonFeedProps {\r\n  sort: ISort\r\n}\r\n\r\nconst CommonFeed: React.FC<CommonFeedProps> = ({ sort }) => {\r\n  const token = useAccessToken()\r\n  const baseUrl = useSelector((state: IState) => state.baseUrl)\r\n\r\n  const [posts, setPosts] = useState<IPost[]>([])\r\n  const afterRef = useRef<string>('')\r\n\r\n  const acceptData = (res: any, shouldReset: boolean) => {\r\n    const data = res.data\r\n\r\n    if (data.after !== afterRef.current) {\r\n      //console.log('old after: ', afterRef.current)\r\n      afterRef.current = data.after\r\n      //console.log('new after: ', afterRef.current)\r\n      //console.log('-----------')\r\n\r\n      setPosts(prevPosts => {\r\n        const newPosts = data.children.map((item: any) => trimPost(item.data))\r\n        return shouldReset\r\n          ? [ ...newPosts ]\r\n          : [ ...prevPosts, ...newPosts ]\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  /*const fetchPosts = (shouldReset: boolean) => {\r\n    if (token && token !== 'error') {\r\n      const after = afterRef ? `&after=${afterRef.current}` : ''\r\n\r\n      fetch(`${baseUrl}/${sort}.json?raw_json=1${after}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(res => acceptData(res, shouldReset))\r\n        .catch(error => console.log(error))\r\n    }\r\n  }*/\r\n\r\n  const fetchPosts = useFetch({\r\n    path: `/${sort}`,\r\n    callback: acceptData,\r\n    afterRef\r\n  })\r\n\r\n  useEffect(() => {\r\n    afterRef.current = ''\r\n  }, [sort])\r\n\r\n  useEffect(() => fetchPosts(true), [token, sort])\r\n\r\n  return posts.length\r\n    ? (\r\n        <div className={classes.CommonFeed}>\r\n          {posts && posts.map((post, i) => {\r\n            return <div className={classes.post}>\r\n              <Post key={i} data={post} />\r\n            </div>\r\n          })}\r\n          {posts && token && <Observer onObserve={() => fetchPosts(false)} logMessage=\"in common feed\" />}\r\n        </div>\r\n      )\r\n    : <div className={classes.CommonFeed} data-center>\r\n      <Loader />\r\n    </div>\r\n}\r\n\r\nexport default CommonFeed","// extracted by mini-css-extract-plugin\nexport default {\"SubredditsSidebar\":\"SubredditsSidebar_SubredditsSidebar__1l-VI\",\"fade-in\":\"SubredditsSidebar_fade-in__-qKlq\",\"fade-out\":\"SubredditsSidebar_fade-out__PdxnU\",\"scale-up\":\"SubredditsSidebar_scale-up__ACyXK\",\"scale-down\":\"SubredditsSidebar_scale-down__djOmU\",\"slide-out-up\":\"SubredditsSidebar_slide-out-up__qKNEK\",\"slide-out-down\":\"SubredditsSidebar_slide-out-down__j5Kz8\",\"slide-out-right\":\"SubredditsSidebar_slide-out-right__9EI-p\",\"slide-out-left\":\"SubredditsSidebar_slide-out-left__lHsUF\",\"slide-in-up\":\"SubredditsSidebar_slide-in-up__sbsIC\",\"slide-in-down\":\"SubredditsSidebar_slide-in-down__riBoW\",\"slide-in-right\":\"SubredditsSidebar_slide-in-right__HL3aU\",\"slide-in-left\":\"SubredditsSidebar_slide-in-left__3UGmZ\",\"shake-x\":\"SubredditsSidebar_shake-x__+FGS3\",\"shake-y\":\"SubredditsSidebar_shake-y__61wsu\",\"spin\":\"SubredditsSidebar_spin__JIiTZ\",\"ping\":\"SubredditsSidebar_ping__S+iLq\",\"blink\":\"SubredditsSidebar_blink__3SVXg\",\"float\":\"SubredditsSidebar_float__GsCck\",\"bounce\":\"SubredditsSidebar_bounce__yzVVB\",\"pulse\":\"SubredditsSidebar_pulse__rLBee\"};","import { ISubredditCreds } from './types'\r\n\r\nconst trimSubredditCreds = (data: any): ISubredditCreds => {\r\n  return {\r\n    name: data.display_name_prefixed,\r\n    icon: data.icon_img || data.community_icon || null\r\n  }\r\n}\r\n\r\nexport default trimSubredditCreds","// extracted by mini-css-extract-plugin\nexport default {\"communities\":\"Communities_communities__GbQ1R\",\"list\":\"Communities_list__Kvtp6\",\"heading\":\"Communities_heading__Uv4r6\",\"subreddit\":\"Communities_subreddit__5SWWt\",\"icon\":\"Communities_icon__ii6+c\",\"btn\":\"Communities_btn__0wQTI\",\"fade-in\":\"Communities_fade-in__pP0JX\",\"fade-out\":\"Communities_fade-out__0UsRe\",\"scale-up\":\"Communities_scale-up__xPUot\",\"scale-down\":\"Communities_scale-down__wgfTZ\",\"slide-out-up\":\"Communities_slide-out-up__AYDWs\",\"slide-out-down\":\"Communities_slide-out-down__Xpd25\",\"slide-out-right\":\"Communities_slide-out-right__KOBik\",\"slide-out-left\":\"Communities_slide-out-left__WJTx1\",\"slide-in-up\":\"Communities_slide-in-up__DE5Vm\",\"slide-in-down\":\"Communities_slide-in-down__tgwqf\",\"slide-in-right\":\"Communities_slide-in-right__DBndB\",\"slide-in-left\":\"Communities_slide-in-left__9dJhI\",\"shake-x\":\"Communities_shake-x__qQTZu\",\"shake-y\":\"Communities_shake-y__oMSqh\",\"spin\":\"Communities_spin__463sI\",\"ping\":\"Communities_ping__vBafL\",\"blink\":\"Communities_blink__N89KJ\",\"float\":\"Communities_float__CeCtn\",\"bounce\":\"Communities_bounce__YNL6+\",\"pulse\":\"Communities_pulse__soz9a\"};","import React, { useEffect, useState, useRef } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { ISubredditCreds } from \"../types\"\r\nimport IState from '@redux/IState'\r\nimport trimSubredditCreds from '../trimSubredditCreds'\r\nimport { Link } from \"react-router-dom\"\r\nimport classes from './Communities.module.scss'\r\n\r\nimport { useAccessToken } from \"@shared/hooks\"\r\n\r\nconst Communities: React.FC = () => {\r\n  const token = useAccessToken()\r\n  const baseUrl = useSelector((state: IState) => state.baseUrl)\r\n  const [subreddits, setSubreddits] = useState<ISubredditCreds[]>([])\r\n  const afterRef = useRef<string>('')\r\n  const isAll = useRef(false)\r\n\r\n  const acceptData = (res: any) => {\r\n    const data = res.data\r\n    if (data.after !== afterRef.current) {\r\n      if (data.after === null) isAll.current = true\r\n      afterRef.current = data.after\r\n\r\n      setSubreddits(prevSubs => ([\r\n        ...prevSubs,\r\n        ...data.children\r\n          .filter((item: any) => item.data.display_name_prefixed.startsWith('r/'))\r\n          .map((item: any) => trimSubredditCreds(item.data))\r\n      ]))\r\n    }\r\n  }\r\n\r\n  const fetchSubs = () => {\r\n    if (token && token !== 'error' && !isAll.current) {\r\n      const after = afterRef ? `&after=${afterRef.current}` : ''\r\n      fetch(`${baseUrl}/subreddits/mine/subscriber?raw_json=1${after}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(acceptData)\r\n        .catch(error => console.log(error))\r\n    }\r\n  }\r\n\r\n  useEffect(fetchSubs, [token])\r\n\r\n  return (\r\n    <div className={classes.communities}>\r\n      <h5 className={classes.heading}>My Subreddits</h5>\r\n      <ul className={classes.list} >\r\n        {subreddits.map(sub => (\r\n          <li className={classes.subreddit}>\r\n            {sub.icon\r\n              ? <img src={sub.icon} alt=\"\" width={25} height={25} className={classes.icon} />\r\n              : <div className={classes.icon} data-placeholder />}\r\n            <Link to={sub.name}>{sub.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {!isAll.current && (\r\n        <button onClick={fetchSubs} className={classes.btn}>load more</button>\r\n        /*<Observer onObserve={fetchSubs} logMessage=\"in communitiess\" />*/\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Communities","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Search_container__3W0Yp\",\"input\":\"Search_input__0NZSN\",\"btn\":\"Search_btn__4nr4M\",\"list\":\"Search_list__vqisp\",\"fade-in\":\"Search_fade-in__xwtDP\",\"fade-out\":\"Search_fade-out__2NH89\",\"scale-up\":\"Search_scale-up__nMR99\",\"scale-down\":\"Search_scale-down__W+9Kq\",\"slide-out-up\":\"Search_slide-out-up__YpKba\",\"slide-out-down\":\"Search_slide-out-down__pY8Qk\",\"slide-out-right\":\"Search_slide-out-right__MW5ou\",\"slide-out-left\":\"Search_slide-out-left__vO2nA\",\"slide-in-up\":\"Search_slide-in-up__BRIQm\",\"slide-in-down\":\"Search_slide-in-down__E+nVI\",\"slide-in-right\":\"Search_slide-in-right__KoUqY\",\"slide-in-left\":\"Search_slide-in-left__iDbf5\",\"shake-x\":\"Search_shake-x__1xa1J\",\"shake-y\":\"Search_shake-y__5ZSEs\",\"spin\":\"Search_spin__VzDZT\",\"ping\":\"Search_ping__eagJV\",\"blink\":\"Search_blink__zwvRc\",\"float\":\"Search_float__tSeVc\",\"bounce\":\"Search_bounce__0DMHn\",\"pulse\":\"Search_pulse__yp7vF\"};","import React, { useRef, useState } from \"react\"\r\nimport { Properties } from \"csstype\"\r\nimport { Link } from \"react-router-dom\"\r\nimport classes from './Search.module.scss'\r\n\r\nimport { useFetch } from \"@shared/hooks\"\r\n\r\nconst Search: React.FC = () => {\r\n  const [input, setInput] = useState<string>('')\r\n  const popupRef = useRef<HTMLUListElement>(null)\r\n  const [popupData, setPopupData] = useState<any[]>([])\r\n\r\n  const acceptData = (data: any) => {\r\n    //console.log('search result: ', data)\r\n    const arr = data.subreddits.sort((a: any, b: any) => a.subscriber_count - b.subscriber_count)\r\n    setPopupData(arr)\r\n    const handleClick = (e: MouseEvent) => {\r\n      if (!popupRef.current!.contains(e.target as Node)) {\r\n        setPopupData([])\r\n      }\r\n    } \r\n    document.addEventListener('click', handleClick)\r\n  }\r\n\r\n  const searchSubs = useFetch({\r\n    path: `/api/search_subreddits`,\r\n    callback: acceptData,\r\n    body: new URLSearchParams(`exact=false&include_over_18=true&query=${input}`)\r\n  })\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <input \r\n        type=\"text\" \r\n        value={input} \r\n        onChange={e => setInput(e.target.value)} \r\n        placeholder=\"search subreddits\" \r\n        className={classes.input}\r\n      />\r\n      <button onClick={searchSubs} className={classes.btn}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n        <circle cx=\"11\" cy=\"11\" r=\"8\" stroke=\"currentColor\" fill=\"none\"></circle>\r\n        <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" stroke=\"currentColor\"></line>\r\n      </svg>\r\n      </button>\r\n      {!!popupData?.length && (\r\n        <ul ref={popupRef} className={classes.list}>\r\n          {popupData.map(item => {\r\n            return <li>\r\n              <Link to={`/r/${item.name}`}>{item.name}</Link>\r\n            </li>\r\n          })}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search","import React from \"react\"\r\nimport classes from './SubredditsSidebar.module.scss'\r\n\r\nimport Communities from \"../Communities/Communities\"\r\nimport Search from \"../Search/Search\"\r\n\r\nconst SubredditsSidebar: React.FC = () => {\r\n  return (\r\n    <aside className={classes.SubredditsSidebar}>\r\n      <Search />\r\n      <hr />\r\n      <Communities />\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default SubredditsSidebar","import {FeedView} from '@features/feed'\r\nexport default FeedView","import React, { useState } from 'react'\r\nimport classes from './FeedView.module.scss'\r\n\r\nimport CommonFeed from '../CommonFeed/CommonFeed';\r\nimport SubredditsSidebar from '../SubredditsSidebar/SubredditsSidebar';\r\n\r\nimport { SortBar, Nav } from '@shared/components';\r\nimport { ISort } from '@shared/types';\r\n\r\nconst FeedView: React.FC = () => {\r\n  const [sort, setSort] = useState<ISort>('best')\r\n\r\n  const changeSort = (str: ISort) => {\r\n    setSort(str)\r\n  }\r\n\r\n  return (\r\n    <main className={classes.App}>\r\n      <Nav />\r\n      {/*<div data-container>\r\n        <div className={classes.sortbar}>\r\n          <SortBar changeSort={changeSort} sort={sort} />\r\n        </div>\r\n        \r\n        <div className={classes.commonFeed}>\r\n          <CommonFeed sort={sort} />\r\n        </div>\r\n      </div>\r\n      <SubredditsSidebar />*/}\r\n      <section data-container className={classes.content}>\r\n        <div>\r\n          <div className={classes.sortbar}>\r\n            <SortBar changeSort={changeSort} sort={sort} />\r\n          </div>\r\n          <CommonFeed sort={sort} />\r\n        </div>\r\n\r\n        <SubredditsSidebar />\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default FeedView;"],"names":["sort","token","useAccessToken","useSelector","state","baseUrl","useState","posts","setPosts","afterRef","useRef","fetchPosts","useFetch","path","callback","res","shouldReset","data","after","current","prevPosts","newPosts","children","map","item","trimPost","useEffect","length","className","classes","post","i","onObserve","logMessage","name","display_name_prefixed","icon","icon_img","community_icon","subreddits","setSubreddits","isAll","acceptData","prevSubs","filter","startsWith","trimSubredditCreds","fetchSubs","fetch","method","headers","Authorization","then","json","catch","error","console","log","sub","src","alt","width","height","to","onClick","input","setInput","popupRef","popupData","setPopupData","searchSubs","arr","a","b","subscriber_count","document","addEventListener","e","contains","target","body","URLSearchParams","type","value","onChange","placeholder","xmlns","viewBox","fill","cx","cy","r","stroke","x1","y1","x2","y2","ref","setSort","changeSort","str"],"sourceRoot":""}