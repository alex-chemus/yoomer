{"version":3,"file":"static/js/657.c3baa7e2.chunk.js","mappings":"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","sources":["webpack://yoomer/./src/views/PostView/PostView.module.scss?da60","webpack://yoomer/./src/components/CommentsSection/CommentsSection.module.scss?b2e4","utils/trimComment.ts","webpack://yoomer/./src/components/Comment/Comment.module.scss?34ce","webpack://yoomer/./src/components/CommentField/CommentField.module.scss?57b3","components/CommentField/CommentField.tsx","components/Comment/Comment.tsx","components/CommentsSection/CommentsSection.tsx","views/PostView/PostView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"post\":\"PostView_post__FO+X3\",\"topContainer\":\"PostView_topContainer__UbICx\",\"titleContainer\":\"PostView_titleContainer__Y-YAJ\",\"textContainer\":\"PostView_textContainer__r3a62\",\"vote\":\"PostView_vote__8fDVK\"};","// extracted by mini-css-extract-plugin\nexport default {\"sortBar\":\"CommentsSection_sortBar__h97jw\",\"active\":\"CommentsSection_active__fCTWy\",\"panel\":\"CommentsSection_panel__aaz+r\",\"btn\":\"CommentsSection_btn__AMnyy\",\"comment\":\"CommentsSection_comment__0nT4R\",\"commentField\":\"CommentsSection_commentField__v2Y4P\"};","import { IComment } from \"./types\";\r\n\r\nconst trimComment = (data: any): IComment => {\r\n  return {\r\n    author_flair_background_color: data.author_flair_background_color,\r\n    author_flair_text_color: data.author_flair_text_color,\r\n    author_flair_richtext: data.author_flair_richtext,\r\n    body: data.body,\r\n    name: data.name,\r\n    parent_id: data.parent_id,\r\n    replies: data.replies,\r\n    author: data.author,\r\n    body_html: data.body_html,\r\n    likes: data.likes\r\n  }\r\n}\r\n\r\nexport default trimComment","// extracted by mini-css-extract-plugin\nexport default {\"comment\":\"Comment_comment__ua3pG\",\"title\":\"Comment_title__h8uLi\",\"replies\":\"Comment_replies__5A9an\",\"showReplies\":\"Comment_showReplies__-rGTn\",\"reply\":\"Comment_reply__PKz4K\",\"replyComment\":\"Comment_replyComment__hcHPX\"};","// extracted by mini-css-extract-plugin\nexport default {\"field\":\"CommentField_field__OxJgZ\"};","import { Properties } from \"csstype\"\r\nimport React, { useRef } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport useAccessToken from \"../../hooks/useAccessToken\"\r\nimport { State } from \"../../utils/types\"\r\nimport classes from './CommentField.module.scss'\r\n\r\ninterface CommentFieldProps {\r\n  id: string,\r\n  onSubmit(): void,\r\n  bgcolor?: number\r\n}\r\n\r\nconst CommentField: React.FC<CommentFieldProps> = ({ id, onSubmit, bgcolor = 1 }) => {\r\n  const token = useAccessToken()\r\n  const baseUrl = useSelector((state: State) => state.baseUrl)\r\n  const ref = useRef<HTMLTextAreaElement>(null)\r\n\r\n  const submit = () => {\r\n    if (token && token !== 'error') {\r\n      fetch(`${baseUrl}/api/comment`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        },\r\n        body: new URLSearchParams(`thing_id=${id}&text=${ref.current!.value}`)\r\n      })\r\n        .then(res => res.json())\r\n        .then(() => {\r\n          ref.current!.value = ''\r\n          onSubmit()\r\n        })\r\n        .catch(error => console.log(error))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.field}>\r\n      <textarea \r\n        rows={3} placeholder=\"write a comment\" \r\n        ref={ref} \r\n        data-primary={bgcolor === 1 || undefined}\r\n        data-secondary={bgcolor === 2 || undefined}\r\n      />\r\n      <button onClick={submit} \r\n        data-primary={bgcolor === 1 || undefined}\r\n        data-secondary={bgcolor === 2 || undefined}\r\n      > Send </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CommentField","import React, { useState, useRef, useEffect } from 'react'\r\nimport trimComment from '../../utils/trimComment'\r\nimport { IComment } from '../../utils/types'\r\nimport classes from './Comment.module.scss'\r\n\r\nimport Flair from '../Flair/Flair'\r\nimport CommentField from '../CommentField/CommentField'\r\nimport Vote from '../Vote/Vote'\r\nimport { Properties } from 'csstype'\r\n\r\ninterface CommentProps {\r\n  data: any,\r\n  onSubmit(): void\r\n  bgcolor?: string\r\n}\r\n\r\nconst Comment: React.FC<CommentProps> = ({ data, onSubmit, bgcolor = 'var(--bg-color-1)' }) => {\r\n  //console.log('raw comment data', data.data)\r\n  //const [comment, setComment] = useState<IComment>()\r\n  const comment = useRef<IComment>(trimComment(data.data))\r\n  const [showReplies, setShowReplies] = useState(false)\r\n  const [reply, setReply] = useState(false)\r\n  const divRef = useRef<HTMLDivElement>(null)\r\n\r\n  useEffect(() => {\r\n    //divRef.current.innerHTML = comment.current.body_html\r\n    if (divRef.current) divRef.current.innerHTML = comment.current.body_html\r\n    //console.log('comment raw data', data.data)\r\n  }, [])\r\n\r\n  if (data.kind !== 't1') return null\r\n\r\n  const commentStyle: Properties = {\r\n    backgroundColor: bgcolor\r\n  }\r\n\r\n  const passBgColor = () => {\r\n    return bgcolor === 'var(--bg-color-1)' ? 'var(--bg-color-2)' : 'var(--bg-color-1)'\r\n  }\r\n\r\n  const dyeBtn = () => {\r\n    return bgcolor === 'var(--bg-color-1)' ? 2 : 1\r\n  }\r\n\r\n  return (\r\n    <div className={classes.comment} style={commentStyle}>\r\n      <div className={classes.title}>\r\n        <h6>{comment.current.author}</h6>\r\n        <Flair \r\n          bgcolor={comment.current.author_flair_background_color}\r\n          color={comment.current.author_flair_text_color}\r\n          richtext={comment.current.author_flair_richtext}\r\n        />\r\n      </div>\r\n      <div ref={divRef} data-mb></div>\r\n      <div data-mb>\r\n        <Vote \r\n          likes={comment.current.likes} \r\n          name={comment.current.name} \r\n          bgcolor={bgcolor === 'var(--bg-color-1)' ? 'var(--bg-color-2)' : 'var(--bg-color-1)'}\r\n        />\r\n      </div>\r\n\r\n      {reply\r\n        ? <CommentField \r\n          id={comment.current.name} \r\n          onSubmit={onSubmit} bgcolor={bgcolor === 'var(--bg-color-1)' ? 2 : 1}\r\n        />\r\n        : <button \r\n            onClick={() => setReply(true)} className={classes.reply} \r\n            data-btn={bgcolor === 'var(--bg-color-1)' ? 2 : 1}\r\n          >  Reply </button>}\r\n\r\n      {comment.current.replies && (\r\n        <button \r\n          onClick={() => setShowReplies(!showReplies)} \r\n          data-btn={bgcolor === 'var(--bg-color-1)' ? 2 : 1}\r\n        > {showReplies ? 'Hide' : 'Show'}&nbsp;Replies </button>\r\n      )}\r\n\r\n      {showReplies && (\r\n        <div className={classes.replies}>\r\n          {comment.current.replies.data.children.map((item: any) => {\r\n            return <div className={classes.replyComment}>\r\n              <Comment data={item} onSubmit={onSubmit} bgcolor={passBgColor()} />\r\n            </div>\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Comment","import React, { useEffect, useState, useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport useAccessToken from '../../hooks/useAccessToken'\r\nimport { State } from '../../utils/types'\r\nimport { Properties } from 'csstype'\r\nimport classes from './CommentsSection.module.scss'\r\n\r\nimport Comment from '../Comment/Comment'\r\nimport CommentField from '../CommentField/CommentField'\r\nimport Observer from '../Observer/Observer'\r\nimport Loader from '../Loader/Loader'\r\n\r\ninterface CommentsSectionProps {\r\n  subreddit: string,\r\n  link: string\r\n}\r\n\r\nconst CommentsSection: React.FC<CommentsSectionProps> = ({ link, subreddit }) => {\r\n  const token = useAccessToken()\r\n  const baseUrl = useSelector((state: State) => state.baseUrl)\r\n\r\n  const [comments, setComments] = useState<any[]>([])\r\n  const [more, setMore] = useState<any>()\r\n  const mRef = useRef<number | null>(0)\r\n  const panel = useRef<HTMLDivElement>(null)\r\n\r\n  type Sort = 'old' | 'new' | 'top' | 'controversial'\r\n  const [sort, setSort] = useState<Sort>('top')\r\n\r\n  const acceptData = (data: any) => {\r\n    const newComments: any[] = []\r\n\r\n    data[1].data.children.forEach((item: any) => {\r\n      if (item.kind === 'more')\r\n        setMore(item)\r\n      else \r\n        newComments.push(item)\r\n    })\r\n\r\n    setComments(prev => ([ ...prev, ...newComments ]))\r\n  }\r\n\r\n  const fetchComments = () => {\r\n    if (token && token !== 'error') {\r\n      setComments([])\r\n      setMore(null)\r\n      fetch(`${baseUrl}/comments/${link.slice(3)}?raw_json=1&sort=${sort}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(acceptData)\r\n        .catch(error => console.log(error))\r\n    }\r\n  }\r\n\r\n  const fetchMore = () => {\r\n    if (token && token !== 'error' && typeof mRef.current === 'number') {\r\n      const params = `raw_json=1&comment=${more.data.children[mRef.current!]}&sort=${sort}`\r\n      mRef.current = mRef.current < more.data.children.length -1 \r\n        ? mRef.current + 1\r\n        : null\r\n        \r\n      fetch(`${baseUrl}/comments/${more.data.parent_id.slice(3)}?${params}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(acceptData)\r\n        .catch(error => console.log(error))\r\n    }\r\n  }\r\n\r\n  useEffect(fetchComments, [token, sort])\r\n\r\n  /*const dyeSortButton = (currentSort: Sort) => {\r\n    return {\r\n      backgroundColor: currentSort === sort ? 'purple' : 'white'\r\n    }\r\n  }*/\r\n\r\n  const dyeSortButton = (currentSort: Sort): Properties => ({\r\n    backgroundColor: currentSort === sort ? 'var(--accent-color)' : 'transparent',\r\n    color: currentSort === sort ? 'var(--gray-0)' : ''\r\n  })\r\n\r\n  const slide = (e: React.MouseEvent) => {\r\n    if (window.matchMedia('(max-width: 576px)').matches) {\r\n      const heading = e.currentTarget as Element\r\n      heading.classList.toggle(classes.active)\r\n      if (panel.current!.style.maxHeight) {\r\n        panel.current!.style.maxHeight = ''\r\n      } else {\r\n        panel.current!.style.maxHeight = panel.current!.scrollHeight + 'px' //'200px'\r\n      }\r\n    }\r\n  }\r\n\r\n  return comments\r\n    ? (\r\n      <section className={classes.comments}>\r\n        <div className={classes.commentField}>\r\n          <CommentField id={link} onSubmit={fetchComments} />\r\n        </div>\r\n\r\n        <div className={classes.sortBar}>\r\n          <h6 onClick={e => slide(e)}>\r\n            Sort by\r\n            <span data-mobile>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\" stroke='currentColor'></line>'\r\n                <polyline points=\"5 12 12 5 19 12\" stroke=\"currentColor\"></polyline>\r\n              </svg>\r\n            </span>\r\n          </h6>\r\n          \r\n          <div className={classes.panel} ref={panel}>\r\n            <button \r\n              onClick={() => setSort('top')} \r\n              style={dyeSortButton('top')}\r\n              className={classes.btn}\r\n            >Top</button>\r\n\r\n            <button \r\n              onClick={() => setSort('new')} \r\n              style={dyeSortButton('new')}\r\n              className={classes.btn}\r\n            >New</button>\r\n\r\n            <button \r\n              onClick={() => setSort('old')} \r\n              style={dyeSortButton('old')}\r\n              className={classes.btn}\r\n            >Old</button>\r\n\r\n            <button \r\n              onClick={() => setSort('controversial')} \r\n              style={dyeSortButton('controversial')}\r\n              className={classes.btn}\r\n            >Controversial</button>\r\n          </div>\r\n        </div>\r\n\r\n        {comments.map(comment => {\r\n          return <div className={classes.comment}>\r\n            <Comment data={comment} onSubmit={fetchComments} />\r\n          </div>\r\n        })}\r\n        {more && token && <Observer onObserve={fetchMore} logMessage=\"in comments section\" />}\r\n      </section>\r\n    )\r\n    : <Loader />\r\n}\r\n\r\nexport default CommentsSection","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport useAccessToken from '../../hooks/useAccessToken'\r\nimport useFetch from '../../hooks/useFetch'\r\nimport trimPost from '../../utils/trimPost'\r\nimport { IPost, State } from '../../utils/types'\r\nimport classes from './PostView.module.scss';\r\n\r\nimport CommentsSection from '../../components/CommentsSection/CommentsSection'\r\nimport PostContent from '../../components/PostContent/PostContent'\r\nimport PostCreds from '../../components/PostCreds/PostCreds'\r\nimport Flair from '../../components/Flair/Flair'\r\nimport SaveButton from '../../components/SaveButton/SaveButton'\r\nimport Vote from '../../components/Vote/Vote'\r\nimport Loader from '../../components/Loader/Loader'\r\nimport RedditPost from '../../components/RedditPost/RedditPost'\r\nimport Nav from '../../components/Nav/Nav'\r\n\r\nconst PostView: React.FC = () => {\r\n  const { id } = useParams()\r\n  const token = useAccessToken()\r\n  const [postData, setPostData] = useState<IPost>()\r\n\r\n  const acceptData = (res: any) => {\r\n    const data = res.data.children[0].data\r\n    setPostData(trimPost(data))\r\n  }\r\n\r\n  const fetchData = useFetch({\r\n    path: `/by_id/${id}`,\r\n    callback: acceptData\r\n  })\r\n\r\n  useEffect(fetchData, [token])\r\n\r\n  return postData \r\n    ? (\r\n      <>\r\n        <Nav />\r\n        <main className={classes.post}>\r\n          <div className={classes.topContainer}>\r\n            <PostCreds \r\n              subreddit={postData.subreddit}\r\n              author={postData.author}\r\n              bgcolor={postData.author_flair_background_color}\r\n              color={postData.author_flair_text_color}\r\n              richtext={postData.author_flair_richtext}\r\n            />\r\n            <SaveButton saved={postData.saved} name={postData.name} />\r\n          </div>\r\n\r\n          <div className={classes.titleContainer}>\r\n            <p>{postData.title}</p>\r\n            <Flair \r\n              bgcolor={postData.link_flair_background_color}\r\n              color={postData.link_flair_text_color}\r\n              richtext={postData.link_flair_richtext}\r\n            />\r\n          </div>\r\n\r\n          {postData.selftext_html?.length && (\r\n            <div \r\n              className={classes.textContainer} \r\n              dangerouslySetInnerHTML={{__html: postData.selftext_html}} \r\n            />\r\n          )}\r\n\r\n          <PostContent \r\n            postType={postData.post_hint}\r\n            preview={postData.preview}\r\n            media={postData.media}\r\n            over18={postData.over_18}\r\n            spoiler={postData.spoiler}\r\n            url={postData.url}\r\n          />\r\n\r\n          <div className={classes.vote}>\r\n            <Vote likes={postData.likes} name={postData.name} />\r\n            <RedditPost permalink={postData.permalink} />\r\n          </div>\r\n\r\n          <CommentsSection \r\n            subreddit={postData.subreddit}\r\n            link={postData.name}\r\n          />\r\n        </main>\r\n      </>\r\n    ) \r\n    : <main className={classes.post} data-center data-container>\r\n      <Loader />\r\n    </main>\r\n}\r\n\r\nexport default PostView"],"names":["data","author_flair_background_color","author_flair_text_color","author_flair_richtext","body","name","parent_id","replies","author","body_html","likes","id","onSubmit","bgcolor","token","useAccessToken","baseUrl","useSelector","state","ref","useRef","className","classes","rows","placeholder","undefined","onClick","fetch","method","headers","Authorization","URLSearchParams","current","value","then","res","json","catch","error","console","log","Comment","comment","trimComment","useState","showReplies","setShowReplies","reply","setReply","divRef","useEffect","innerHTML","kind","commentStyle","backgroundColor","style","Flair","color","richtext","Vote","children","map","item","link","subreddit","comments","setComments","more","setMore","mRef","panel","sort","setSort","acceptData","newComments","forEach","push","prev","fetchComments","slice","dyeSortButton","currentSort","e","window","matchMedia","matches","currentTarget","classList","toggle","maxHeight","scrollHeight","slide","xmlns","width","height","viewBox","x1","y1","x2","y2","stroke","points","Observer","onObserve","params","length","logMessage","Loader","useParams","postData","setPostData","fetchData","useFetch","path","callback","trimPost","Nav","PostCreds","SaveButton","saved","title","link_flair_background_color","link_flair_text_color","link_flair_richtext","selftext_html","dangerouslySetInnerHTML","__html","PostContent","postType","post_hint","preview","media","over18","over_18","spoiler","url","RedditPost","permalink"],"sourceRoot":""}